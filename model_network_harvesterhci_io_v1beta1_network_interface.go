/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NetworkHarvesterhciIoV1beta1NetworkInterface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkHarvesterhciIoV1beta1NetworkInterface{}

// NetworkHarvesterhciIoV1beta1NetworkInterface struct for NetworkHarvesterhciIoV1beta1NetworkInterface
type NetworkHarvesterhciIoV1beta1NetworkInterface struct {
	Index int32 `json:"index"`
	MasterIndex *int32 `json:"masterIndex,omitempty"`
	Name string `json:"name"`
	State string `json:"state"`
	Type string `json:"type"`
	UsedByManagementNetwork *bool `json:"usedByManagementNetwork,omitempty"`
	UsedByVlanNetwork *bool `json:"usedByVlanNetwork,omitempty"`
}

type _NetworkHarvesterhciIoV1beta1NetworkInterface NetworkHarvesterhciIoV1beta1NetworkInterface

// NewNetworkHarvesterhciIoV1beta1NetworkInterface instantiates a new NetworkHarvesterhciIoV1beta1NetworkInterface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkHarvesterhciIoV1beta1NetworkInterface(index int32, name string, state string, type_ string) *NetworkHarvesterhciIoV1beta1NetworkInterface {
	this := NetworkHarvesterhciIoV1beta1NetworkInterface{}
	this.Index = index
	this.Name = name
	this.State = state
	this.Type = type_
	return &this
}

// NewNetworkHarvesterhciIoV1beta1NetworkInterfaceWithDefaults instantiates a new NetworkHarvesterhciIoV1beta1NetworkInterface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkHarvesterhciIoV1beta1NetworkInterfaceWithDefaults() *NetworkHarvesterhciIoV1beta1NetworkInterface {
	this := NetworkHarvesterhciIoV1beta1NetworkInterface{}
	var index int32 = 0
	this.Index = index
	var name string = ""
	this.Name = name
	var state string = ""
	this.State = state
	var type_ string = ""
	this.Type = type_
	return &this
}

// GetIndex returns the Index field value
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) SetIndex(v int32) {
	o.Index = v
}

// GetMasterIndex returns the MasterIndex field value if set, zero value otherwise.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetMasterIndex() int32 {
	if o == nil || IsNil(o.MasterIndex) {
		var ret int32
		return ret
	}
	return *o.MasterIndex
}

// GetMasterIndexOk returns a tuple with the MasterIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetMasterIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.MasterIndex) {
		return nil, false
	}
	return o.MasterIndex, true
}

// HasMasterIndex returns a boolean if a field has been set.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) HasMasterIndex() bool {
	if o != nil && !IsNil(o.MasterIndex) {
		return true
	}

	return false
}

// SetMasterIndex gets a reference to the given int32 and assigns it to the MasterIndex field.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) SetMasterIndex(v int32) {
	o.MasterIndex = &v
}

// GetName returns the Name field value
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) SetName(v string) {
	o.Name = v
}

// GetState returns the State field value
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) SetState(v string) {
	o.State = v
}

// GetType returns the Type field value
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) SetType(v string) {
	o.Type = v
}

// GetUsedByManagementNetwork returns the UsedByManagementNetwork field value if set, zero value otherwise.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetUsedByManagementNetwork() bool {
	if o == nil || IsNil(o.UsedByManagementNetwork) {
		var ret bool
		return ret
	}
	return *o.UsedByManagementNetwork
}

// GetUsedByManagementNetworkOk returns a tuple with the UsedByManagementNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetUsedByManagementNetworkOk() (*bool, bool) {
	if o == nil || IsNil(o.UsedByManagementNetwork) {
		return nil, false
	}
	return o.UsedByManagementNetwork, true
}

// HasUsedByManagementNetwork returns a boolean if a field has been set.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) HasUsedByManagementNetwork() bool {
	if o != nil && !IsNil(o.UsedByManagementNetwork) {
		return true
	}

	return false
}

// SetUsedByManagementNetwork gets a reference to the given bool and assigns it to the UsedByManagementNetwork field.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) SetUsedByManagementNetwork(v bool) {
	o.UsedByManagementNetwork = &v
}

// GetUsedByVlanNetwork returns the UsedByVlanNetwork field value if set, zero value otherwise.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetUsedByVlanNetwork() bool {
	if o == nil || IsNil(o.UsedByVlanNetwork) {
		var ret bool
		return ret
	}
	return *o.UsedByVlanNetwork
}

// GetUsedByVlanNetworkOk returns a tuple with the UsedByVlanNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) GetUsedByVlanNetworkOk() (*bool, bool) {
	if o == nil || IsNil(o.UsedByVlanNetwork) {
		return nil, false
	}
	return o.UsedByVlanNetwork, true
}

// HasUsedByVlanNetwork returns a boolean if a field has been set.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) HasUsedByVlanNetwork() bool {
	if o != nil && !IsNil(o.UsedByVlanNetwork) {
		return true
	}

	return false
}

// SetUsedByVlanNetwork gets a reference to the given bool and assigns it to the UsedByVlanNetwork field.
func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) SetUsedByVlanNetwork(v bool) {
	o.UsedByVlanNetwork = &v
}

func (o NetworkHarvesterhciIoV1beta1NetworkInterface) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkHarvesterhciIoV1beta1NetworkInterface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["index"] = o.Index
	if !IsNil(o.MasterIndex) {
		toSerialize["masterIndex"] = o.MasterIndex
	}
	toSerialize["name"] = o.Name
	toSerialize["state"] = o.State
	toSerialize["type"] = o.Type
	if !IsNil(o.UsedByManagementNetwork) {
		toSerialize["usedByManagementNetwork"] = o.UsedByManagementNetwork
	}
	if !IsNil(o.UsedByVlanNetwork) {
		toSerialize["usedByVlanNetwork"] = o.UsedByVlanNetwork
	}
	return toSerialize, nil
}

func (o *NetworkHarvesterhciIoV1beta1NetworkInterface) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index",
		"name",
		"state",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkHarvesterhciIoV1beta1NetworkInterface := _NetworkHarvesterhciIoV1beta1NetworkInterface{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetworkHarvesterhciIoV1beta1NetworkInterface)

	if err != nil {
		return err
	}

	*o = NetworkHarvesterhciIoV1beta1NetworkInterface(varNetworkHarvesterhciIoV1beta1NetworkInterface)

	return err
}

type NullableNetworkHarvesterhciIoV1beta1NetworkInterface struct {
	value *NetworkHarvesterhciIoV1beta1NetworkInterface
	isSet bool
}

func (v NullableNetworkHarvesterhciIoV1beta1NetworkInterface) Get() *NetworkHarvesterhciIoV1beta1NetworkInterface {
	return v.value
}

func (v *NullableNetworkHarvesterhciIoV1beta1NetworkInterface) Set(val *NetworkHarvesterhciIoV1beta1NetworkInterface) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkHarvesterhciIoV1beta1NetworkInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkHarvesterhciIoV1beta1NetworkInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkHarvesterhciIoV1beta1NetworkInterface(val *NetworkHarvesterhciIoV1beta1NetworkInterface) *NullableNetworkHarvesterhciIoV1beta1NetworkInterface {
	return &NullableNetworkHarvesterhciIoV1beta1NetworkInterface{value: val, isSet: true}
}

func (v NullableNetworkHarvesterhciIoV1beta1NetworkInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkHarvesterhciIoV1beta1NetworkInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


