/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KubevirtIoApiCoreV1Disk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubevirtIoApiCoreV1Disk{}

// KubevirtIoApiCoreV1Disk struct for KubevirtIoApiCoreV1Disk
type KubevirtIoApiCoreV1Disk struct {
	// If specified, the virtual disk will be presented with the given block sizes.
	BlockSize *KubevirtIoApiCoreV1BlockSize `json:"blockSize,omitempty"`
	// BootOrder is an integer value > 0, used to determine ordering of boot devices. Lower values take precedence. Each disk or interface that has a boot order must have a unique value. Disks without a boot order are not tried if a disk with a boot order exists.
	BootOrder *int32 `json:"bootOrder,omitempty"`
	// Cache specifies which kvm disk cache mode should be used. Supported values are: CacheNone, CacheWriteThrough.
	Cache *string `json:"cache,omitempty"`
	// Attach a volume as a cdrom to the vmi.
	Cdrom *KubevirtIoApiCoreV1CDRomTarget `json:"cdrom,omitempty"`
	// dedicatedIOThread indicates this disk should have an exclusive IO Thread. Enabling this implies useIOThreads = true. Defaults to false.
	DedicatedIOThread *bool `json:"dedicatedIOThread,omitempty"`
	// Attach a volume as a disk to the vmi.
	Disk *KubevirtIoApiCoreV1DiskTarget `json:"disk,omitempty"`
	// If specified, it can change the default error policy (stop) for the disk
	ErrorPolicy *string `json:"errorPolicy,omitempty"`
	// IO specifies which QEMU disk IO mode should be used. Supported values are: native, default, threads.
	Io *string `json:"io,omitempty"`
	// Attach a volume as a LUN to the vmi.
	Lun *KubevirtIoApiCoreV1LunTarget `json:"lun,omitempty"`
	// Name is the device name
	Name string `json:"name"`
	// Serial provides the ability to specify a serial number for the disk device.
	Serial *string `json:"serial,omitempty"`
	// If specified the disk is made sharable and multiple write from different VMs are permitted
	Shareable *bool `json:"shareable,omitempty"`
	// If specified, disk address and its tag will be provided to the guest via config drive metadata
	Tag *string `json:"tag,omitempty"`
}

type _KubevirtIoApiCoreV1Disk KubevirtIoApiCoreV1Disk

// NewKubevirtIoApiCoreV1Disk instantiates a new KubevirtIoApiCoreV1Disk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubevirtIoApiCoreV1Disk(name string) *KubevirtIoApiCoreV1Disk {
	this := KubevirtIoApiCoreV1Disk{}
	this.Name = name
	return &this
}

// NewKubevirtIoApiCoreV1DiskWithDefaults instantiates a new KubevirtIoApiCoreV1Disk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubevirtIoApiCoreV1DiskWithDefaults() *KubevirtIoApiCoreV1Disk {
	this := KubevirtIoApiCoreV1Disk{}
	var name string = ""
	this.Name = name
	return &this
}

// GetBlockSize returns the BlockSize field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Disk) GetBlockSize() KubevirtIoApiCoreV1BlockSize {
	if o == nil || IsNil(o.BlockSize) {
		var ret KubevirtIoApiCoreV1BlockSize
		return ret
	}
	return *o.BlockSize
}

// GetBlockSizeOk returns a tuple with the BlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Disk) GetBlockSizeOk() (*KubevirtIoApiCoreV1BlockSize, bool) {
	if o == nil || IsNil(o.BlockSize) {
		return nil, false
	}
	return o.BlockSize, true
}

// HasBlockSize returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Disk) HasBlockSize() bool {
	if o != nil && !IsNil(o.BlockSize) {
		return true
	}

	return false
}

// SetBlockSize gets a reference to the given KubevirtIoApiCoreV1BlockSize and assigns it to the BlockSize field.
func (o *KubevirtIoApiCoreV1Disk) SetBlockSize(v KubevirtIoApiCoreV1BlockSize) {
	o.BlockSize = &v
}

// GetBootOrder returns the BootOrder field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Disk) GetBootOrder() int32 {
	if o == nil || IsNil(o.BootOrder) {
		var ret int32
		return ret
	}
	return *o.BootOrder
}

// GetBootOrderOk returns a tuple with the BootOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Disk) GetBootOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.BootOrder) {
		return nil, false
	}
	return o.BootOrder, true
}

// HasBootOrder returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Disk) HasBootOrder() bool {
	if o != nil && !IsNil(o.BootOrder) {
		return true
	}

	return false
}

// SetBootOrder gets a reference to the given int32 and assigns it to the BootOrder field.
func (o *KubevirtIoApiCoreV1Disk) SetBootOrder(v int32) {
	o.BootOrder = &v
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Disk) GetCache() string {
	if o == nil || IsNil(o.Cache) {
		var ret string
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Disk) GetCacheOk() (*string, bool) {
	if o == nil || IsNil(o.Cache) {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Disk) HasCache() bool {
	if o != nil && !IsNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given string and assigns it to the Cache field.
func (o *KubevirtIoApiCoreV1Disk) SetCache(v string) {
	o.Cache = &v
}

// GetCdrom returns the Cdrom field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Disk) GetCdrom() KubevirtIoApiCoreV1CDRomTarget {
	if o == nil || IsNil(o.Cdrom) {
		var ret KubevirtIoApiCoreV1CDRomTarget
		return ret
	}
	return *o.Cdrom
}

// GetCdromOk returns a tuple with the Cdrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Disk) GetCdromOk() (*KubevirtIoApiCoreV1CDRomTarget, bool) {
	if o == nil || IsNil(o.Cdrom) {
		return nil, false
	}
	return o.Cdrom, true
}

// HasCdrom returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Disk) HasCdrom() bool {
	if o != nil && !IsNil(o.Cdrom) {
		return true
	}

	return false
}

// SetCdrom gets a reference to the given KubevirtIoApiCoreV1CDRomTarget and assigns it to the Cdrom field.
func (o *KubevirtIoApiCoreV1Disk) SetCdrom(v KubevirtIoApiCoreV1CDRomTarget) {
	o.Cdrom = &v
}

// GetDedicatedIOThread returns the DedicatedIOThread field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Disk) GetDedicatedIOThread() bool {
	if o == nil || IsNil(o.DedicatedIOThread) {
		var ret bool
		return ret
	}
	return *o.DedicatedIOThread
}

// GetDedicatedIOThreadOk returns a tuple with the DedicatedIOThread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Disk) GetDedicatedIOThreadOk() (*bool, bool) {
	if o == nil || IsNil(o.DedicatedIOThread) {
		return nil, false
	}
	return o.DedicatedIOThread, true
}

// HasDedicatedIOThread returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Disk) HasDedicatedIOThread() bool {
	if o != nil && !IsNil(o.DedicatedIOThread) {
		return true
	}

	return false
}

// SetDedicatedIOThread gets a reference to the given bool and assigns it to the DedicatedIOThread field.
func (o *KubevirtIoApiCoreV1Disk) SetDedicatedIOThread(v bool) {
	o.DedicatedIOThread = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Disk) GetDisk() KubevirtIoApiCoreV1DiskTarget {
	if o == nil || IsNil(o.Disk) {
		var ret KubevirtIoApiCoreV1DiskTarget
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Disk) GetDiskOk() (*KubevirtIoApiCoreV1DiskTarget, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Disk) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given KubevirtIoApiCoreV1DiskTarget and assigns it to the Disk field.
func (o *KubevirtIoApiCoreV1Disk) SetDisk(v KubevirtIoApiCoreV1DiskTarget) {
	o.Disk = &v
}

// GetErrorPolicy returns the ErrorPolicy field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Disk) GetErrorPolicy() string {
	if o == nil || IsNil(o.ErrorPolicy) {
		var ret string
		return ret
	}
	return *o.ErrorPolicy
}

// GetErrorPolicyOk returns a tuple with the ErrorPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Disk) GetErrorPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorPolicy) {
		return nil, false
	}
	return o.ErrorPolicy, true
}

// HasErrorPolicy returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Disk) HasErrorPolicy() bool {
	if o != nil && !IsNil(o.ErrorPolicy) {
		return true
	}

	return false
}

// SetErrorPolicy gets a reference to the given string and assigns it to the ErrorPolicy field.
func (o *KubevirtIoApiCoreV1Disk) SetErrorPolicy(v string) {
	o.ErrorPolicy = &v
}

// GetIo returns the Io field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Disk) GetIo() string {
	if o == nil || IsNil(o.Io) {
		var ret string
		return ret
	}
	return *o.Io
}

// GetIoOk returns a tuple with the Io field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Disk) GetIoOk() (*string, bool) {
	if o == nil || IsNil(o.Io) {
		return nil, false
	}
	return o.Io, true
}

// HasIo returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Disk) HasIo() bool {
	if o != nil && !IsNil(o.Io) {
		return true
	}

	return false
}

// SetIo gets a reference to the given string and assigns it to the Io field.
func (o *KubevirtIoApiCoreV1Disk) SetIo(v string) {
	o.Io = &v
}

// GetLun returns the Lun field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Disk) GetLun() KubevirtIoApiCoreV1LunTarget {
	if o == nil || IsNil(o.Lun) {
		var ret KubevirtIoApiCoreV1LunTarget
		return ret
	}
	return *o.Lun
}

// GetLunOk returns a tuple with the Lun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Disk) GetLunOk() (*KubevirtIoApiCoreV1LunTarget, bool) {
	if o == nil || IsNil(o.Lun) {
		return nil, false
	}
	return o.Lun, true
}

// HasLun returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Disk) HasLun() bool {
	if o != nil && !IsNil(o.Lun) {
		return true
	}

	return false
}

// SetLun gets a reference to the given KubevirtIoApiCoreV1LunTarget and assigns it to the Lun field.
func (o *KubevirtIoApiCoreV1Disk) SetLun(v KubevirtIoApiCoreV1LunTarget) {
	o.Lun = &v
}

// GetName returns the Name field value
func (o *KubevirtIoApiCoreV1Disk) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Disk) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KubevirtIoApiCoreV1Disk) SetName(v string) {
	o.Name = v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Disk) GetSerial() string {
	if o == nil || IsNil(o.Serial) {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Disk) GetSerialOk() (*string, bool) {
	if o == nil || IsNil(o.Serial) {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Disk) HasSerial() bool {
	if o != nil && !IsNil(o.Serial) {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *KubevirtIoApiCoreV1Disk) SetSerial(v string) {
	o.Serial = &v
}

// GetShareable returns the Shareable field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Disk) GetShareable() bool {
	if o == nil || IsNil(o.Shareable) {
		var ret bool
		return ret
	}
	return *o.Shareable
}

// GetShareableOk returns a tuple with the Shareable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Disk) GetShareableOk() (*bool, bool) {
	if o == nil || IsNil(o.Shareable) {
		return nil, false
	}
	return o.Shareable, true
}

// HasShareable returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Disk) HasShareable() bool {
	if o != nil && !IsNil(o.Shareable) {
		return true
	}

	return false
}

// SetShareable gets a reference to the given bool and assigns it to the Shareable field.
func (o *KubevirtIoApiCoreV1Disk) SetShareable(v bool) {
	o.Shareable = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Disk) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Disk) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Disk) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *KubevirtIoApiCoreV1Disk) SetTag(v string) {
	o.Tag = &v
}

func (o KubevirtIoApiCoreV1Disk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubevirtIoApiCoreV1Disk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockSize) {
		toSerialize["blockSize"] = o.BlockSize
	}
	if !IsNil(o.BootOrder) {
		toSerialize["bootOrder"] = o.BootOrder
	}
	if !IsNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}
	if !IsNil(o.Cdrom) {
		toSerialize["cdrom"] = o.Cdrom
	}
	if !IsNil(o.DedicatedIOThread) {
		toSerialize["dedicatedIOThread"] = o.DedicatedIOThread
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.ErrorPolicy) {
		toSerialize["errorPolicy"] = o.ErrorPolicy
	}
	if !IsNil(o.Io) {
		toSerialize["io"] = o.Io
	}
	if !IsNil(o.Lun) {
		toSerialize["lun"] = o.Lun
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Serial) {
		toSerialize["serial"] = o.Serial
	}
	if !IsNil(o.Shareable) {
		toSerialize["shareable"] = o.Shareable
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

func (o *KubevirtIoApiCoreV1Disk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubevirtIoApiCoreV1Disk := _KubevirtIoApiCoreV1Disk{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKubevirtIoApiCoreV1Disk)

	if err != nil {
		return err
	}

	*o = KubevirtIoApiCoreV1Disk(varKubevirtIoApiCoreV1Disk)

	return err
}

type NullableKubevirtIoApiCoreV1Disk struct {
	value *KubevirtIoApiCoreV1Disk
	isSet bool
}

func (v NullableKubevirtIoApiCoreV1Disk) Get() *KubevirtIoApiCoreV1Disk {
	return v.value
}

func (v *NullableKubevirtIoApiCoreV1Disk) Set(val *KubevirtIoApiCoreV1Disk) {
	v.value = val
	v.isSet = true
}

func (v NullableKubevirtIoApiCoreV1Disk) IsSet() bool {
	return v.isSet
}

func (v *NullableKubevirtIoApiCoreV1Disk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubevirtIoApiCoreV1Disk(val *KubevirtIoApiCoreV1Disk) *NullableKubevirtIoApiCoreV1Disk {
	return &NullableKubevirtIoApiCoreV1Disk{value: val, isSet: true}
}

func (v NullableKubevirtIoApiCoreV1Disk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubevirtIoApiCoreV1Disk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


