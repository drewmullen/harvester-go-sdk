/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
)

// checks if the K8sIoV1PodDNSConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &K8sIoV1PodDNSConfig{}

// K8sIoV1PodDNSConfig struct for K8sIoV1PodDNSConfig
type K8sIoV1PodDNSConfig struct {
	Nameservers []string `json:"nameservers,omitempty"`
	Options []K8sIoV1PodDNSConfigOption `json:"options,omitempty"`
	Searches []string `json:"searches,omitempty"`
}

// NewK8sIoV1PodDNSConfig instantiates a new K8sIoV1PodDNSConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewK8sIoV1PodDNSConfig() *K8sIoV1PodDNSConfig {
	this := K8sIoV1PodDNSConfig{}
	return &this
}

// NewK8sIoV1PodDNSConfigWithDefaults instantiates a new K8sIoV1PodDNSConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewK8sIoV1PodDNSConfigWithDefaults() *K8sIoV1PodDNSConfig {
	this := K8sIoV1PodDNSConfig{}
	return &this
}

// GetNameservers returns the Nameservers field value if set, zero value otherwise.
func (o *K8sIoV1PodDNSConfig) GetNameservers() []string {
	if o == nil || IsNil(o.Nameservers) {
		var ret []string
		return ret
	}
	return o.Nameservers
}

// GetNameserversOk returns a tuple with the Nameservers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PodDNSConfig) GetNameserversOk() ([]string, bool) {
	if o == nil || IsNil(o.Nameservers) {
		return nil, false
	}
	return o.Nameservers, true
}

// HasNameservers returns a boolean if a field has been set.
func (o *K8sIoV1PodDNSConfig) HasNameservers() bool {
	if o != nil && !IsNil(o.Nameservers) {
		return true
	}

	return false
}

// SetNameservers gets a reference to the given []string and assigns it to the Nameservers field.
func (o *K8sIoV1PodDNSConfig) SetNameservers(v []string) {
	o.Nameservers = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *K8sIoV1PodDNSConfig) GetOptions() []K8sIoV1PodDNSConfigOption {
	if o == nil || IsNil(o.Options) {
		var ret []K8sIoV1PodDNSConfigOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PodDNSConfig) GetOptionsOk() ([]K8sIoV1PodDNSConfigOption, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *K8sIoV1PodDNSConfig) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []K8sIoV1PodDNSConfigOption and assigns it to the Options field.
func (o *K8sIoV1PodDNSConfig) SetOptions(v []K8sIoV1PodDNSConfigOption) {
	o.Options = v
}

// GetSearches returns the Searches field value if set, zero value otherwise.
func (o *K8sIoV1PodDNSConfig) GetSearches() []string {
	if o == nil || IsNil(o.Searches) {
		var ret []string
		return ret
	}
	return o.Searches
}

// GetSearchesOk returns a tuple with the Searches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PodDNSConfig) GetSearchesOk() ([]string, bool) {
	if o == nil || IsNil(o.Searches) {
		return nil, false
	}
	return o.Searches, true
}

// HasSearches returns a boolean if a field has been set.
func (o *K8sIoV1PodDNSConfig) HasSearches() bool {
	if o != nil && !IsNil(o.Searches) {
		return true
	}

	return false
}

// SetSearches gets a reference to the given []string and assigns it to the Searches field.
func (o *K8sIoV1PodDNSConfig) SetSearches(v []string) {
	o.Searches = v
}

func (o K8sIoV1PodDNSConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o K8sIoV1PodDNSConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nameservers) {
		toSerialize["nameservers"] = o.Nameservers
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.Searches) {
		toSerialize["searches"] = o.Searches
	}
	return toSerialize, nil
}

type NullableK8sIoV1PodDNSConfig struct {
	value *K8sIoV1PodDNSConfig
	isSet bool
}

func (v NullableK8sIoV1PodDNSConfig) Get() *K8sIoV1PodDNSConfig {
	return v.value
}

func (v *NullableK8sIoV1PodDNSConfig) Set(val *K8sIoV1PodDNSConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableK8sIoV1PodDNSConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableK8sIoV1PodDNSConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableK8sIoV1PodDNSConfig(val *K8sIoV1PodDNSConfig) *NullableK8sIoV1PodDNSConfig {
	return &NullableK8sIoV1PodDNSConfig{value: val, isSet: true}
}

func (v NullableK8sIoV1PodDNSConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableK8sIoV1PodDNSConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


