/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// NetworksAPIService NetworksAPI service
type NetworksAPIService service

type ApiCreateNamespacedClusterNetworkRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	namespace string
	networkHarvesterhciIoV1beta1ClusterNetwork *NetworkHarvesterhciIoV1beta1ClusterNetwork
}

func (r ApiCreateNamespacedClusterNetworkRequest) NetworkHarvesterhciIoV1beta1ClusterNetwork(networkHarvesterhciIoV1beta1ClusterNetwork NetworkHarvesterhciIoV1beta1ClusterNetwork) ApiCreateNamespacedClusterNetworkRequest {
	r.networkHarvesterhciIoV1beta1ClusterNetwork = &networkHarvesterhciIoV1beta1ClusterNetwork
	return r
}

func (r ApiCreateNamespacedClusterNetworkRequest) Execute() (*NetworkHarvesterhciIoV1beta1ClusterNetwork, *http.Response, error) {
	return r.ApiService.CreateNamespacedClusterNetworkExecute(r)
}

/*
CreateNamespacedClusterNetwork Create a Namespaced Cluster Network

Create a ClusterNetwork object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiCreateNamespacedClusterNetworkRequest
*/
func (a *NetworksAPIService) CreateNamespacedClusterNetwork(ctx context.Context, namespace string) ApiCreateNamespacedClusterNetworkRequest {
	return ApiCreateNamespacedClusterNetworkRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return NetworkHarvesterhciIoV1beta1ClusterNetwork
func (a *NetworksAPIService) CreateNamespacedClusterNetworkExecute(r ApiCreateNamespacedClusterNetworkRequest) (*NetworkHarvesterhciIoV1beta1ClusterNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkHarvesterhciIoV1beta1ClusterNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.CreateNamespacedClusterNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/network.harvesterhci.io/v1beta1/clusternetworks"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.networkHarvesterhciIoV1beta1ClusterNetwork == nil {
		return localVarReturnValue, nil, reportError("networkHarvesterhciIoV1beta1ClusterNetwork is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.networkHarvesterhciIoV1beta1ClusterNetwork
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateNamespacedNetworkAttachmentDefinitionRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	namespace string
	k8sCniCncfIoV1NetworkAttachmentDefinition *K8sCniCncfIoV1NetworkAttachmentDefinition
}

func (r ApiCreateNamespacedNetworkAttachmentDefinitionRequest) K8sCniCncfIoV1NetworkAttachmentDefinition(k8sCniCncfIoV1NetworkAttachmentDefinition K8sCniCncfIoV1NetworkAttachmentDefinition) ApiCreateNamespacedNetworkAttachmentDefinitionRequest {
	r.k8sCniCncfIoV1NetworkAttachmentDefinition = &k8sCniCncfIoV1NetworkAttachmentDefinition
	return r
}

func (r ApiCreateNamespacedNetworkAttachmentDefinitionRequest) Execute() (*K8sCniCncfIoV1NetworkAttachmentDefinition, *http.Response, error) {
	return r.ApiService.CreateNamespacedNetworkAttachmentDefinitionExecute(r)
}

/*
CreateNamespacedNetworkAttachmentDefinition Create a Namespaced Network Attachment Definition

Create a NetworkAttachmentDefinition object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiCreateNamespacedNetworkAttachmentDefinitionRequest
*/
func (a *NetworksAPIService) CreateNamespacedNetworkAttachmentDefinition(ctx context.Context, namespace string) ApiCreateNamespacedNetworkAttachmentDefinitionRequest {
	return ApiCreateNamespacedNetworkAttachmentDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return K8sCniCncfIoV1NetworkAttachmentDefinition
func (a *NetworksAPIService) CreateNamespacedNetworkAttachmentDefinitionExecute(r ApiCreateNamespacedNetworkAttachmentDefinitionRequest) (*K8sCniCncfIoV1NetworkAttachmentDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *K8sCniCncfIoV1NetworkAttachmentDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.CreateNamespacedNetworkAttachmentDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/k8s.cni.cncf.io/v1/namespaces/{namespace}/network-attachment-definitions"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.k8sCniCncfIoV1NetworkAttachmentDefinition == nil {
		return localVarReturnValue, nil, reportError("k8sCniCncfIoV1NetworkAttachmentDefinition is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.k8sCniCncfIoV1NetworkAttachmentDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateNamespacedNodeNetworkRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	namespace string
	networkHarvesterhciIoV1beta1NodeNetwork *NetworkHarvesterhciIoV1beta1NodeNetwork
}

func (r ApiCreateNamespacedNodeNetworkRequest) NetworkHarvesterhciIoV1beta1NodeNetwork(networkHarvesterhciIoV1beta1NodeNetwork NetworkHarvesterhciIoV1beta1NodeNetwork) ApiCreateNamespacedNodeNetworkRequest {
	r.networkHarvesterhciIoV1beta1NodeNetwork = &networkHarvesterhciIoV1beta1NodeNetwork
	return r
}

func (r ApiCreateNamespacedNodeNetworkRequest) Execute() (*NetworkHarvesterhciIoV1beta1NodeNetwork, *http.Response, error) {
	return r.ApiService.CreateNamespacedNodeNetworkExecute(r)
}

/*
CreateNamespacedNodeNetwork Create a Namespaced Node Network

Create a NodeNetwork object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiCreateNamespacedNodeNetworkRequest
*/
func (a *NetworksAPIService) CreateNamespacedNodeNetwork(ctx context.Context, namespace string) ApiCreateNamespacedNodeNetworkRequest {
	return ApiCreateNamespacedNodeNetworkRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return NetworkHarvesterhciIoV1beta1NodeNetwork
func (a *NetworksAPIService) CreateNamespacedNodeNetworkExecute(r ApiCreateNamespacedNodeNetworkRequest) (*NetworkHarvesterhciIoV1beta1NodeNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkHarvesterhciIoV1beta1NodeNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.CreateNamespacedNodeNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/network.harvesterhci.io/v1beta1/nodenetworks"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.networkHarvesterhciIoV1beta1NodeNetwork == nil {
		return localVarReturnValue, nil, reportError("networkHarvesterhciIoV1beta1NodeNetwork is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.networkHarvesterhciIoV1beta1NodeNetwork
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNamespacedClusterNetworkRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	name string
	namespace string
	k8sIoV1DeleteOptions *K8sIoV1DeleteOptions
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
}

func (r ApiDeleteNamespacedClusterNetworkRequest) K8sIoV1DeleteOptions(k8sIoV1DeleteOptions K8sIoV1DeleteOptions) ApiDeleteNamespacedClusterNetworkRequest {
	r.k8sIoV1DeleteOptions = &k8sIoV1DeleteOptions
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteNamespacedClusterNetworkRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteNamespacedClusterNetworkRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteNamespacedClusterNetworkRequest) OrphanDependents(orphanDependents bool) ApiDeleteNamespacedClusterNetworkRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteNamespacedClusterNetworkRequest) PropagationPolicy(propagationPolicy string) ApiDeleteNamespacedClusterNetworkRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteNamespacedClusterNetworkRequest) Execute() (*NetworkHarvesterhciIoV1beta1ClusterNetwork, *http.Response, error) {
	return r.ApiService.DeleteNamespacedClusterNetworkExecute(r)
}

/*
DeleteNamespacedClusterNetwork Delete a Namespaced Cluster Network

Delete a ClusterNetwork object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiDeleteNamespacedClusterNetworkRequest
*/
func (a *NetworksAPIService) DeleteNamespacedClusterNetwork(ctx context.Context, name string, namespace string) ApiDeleteNamespacedClusterNetworkRequest {
	return ApiDeleteNamespacedClusterNetworkRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return NetworkHarvesterhciIoV1beta1ClusterNetwork
func (a *NetworksAPIService) DeleteNamespacedClusterNetworkExecute(r ApiDeleteNamespacedClusterNetworkRequest) (*NetworkHarvesterhciIoV1beta1ClusterNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkHarvesterhciIoV1beta1ClusterNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.DeleteNamespacedClusterNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/network.harvesterhci.io/v1beta1/clusternetworks/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.k8sIoV1DeleteOptions == nil {
		return localVarReturnValue, nil, reportError("k8sIoV1DeleteOptions is required and must be specified")
	}

	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.k8sIoV1DeleteOptions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNamespacedNetworkAttachmentDefinitionRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	name string
	namespace string
	k8sIoV1DeleteOptions *K8sIoV1DeleteOptions
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
}

func (r ApiDeleteNamespacedNetworkAttachmentDefinitionRequest) K8sIoV1DeleteOptions(k8sIoV1DeleteOptions K8sIoV1DeleteOptions) ApiDeleteNamespacedNetworkAttachmentDefinitionRequest {
	r.k8sIoV1DeleteOptions = &k8sIoV1DeleteOptions
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteNamespacedNetworkAttachmentDefinitionRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteNamespacedNetworkAttachmentDefinitionRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteNamespacedNetworkAttachmentDefinitionRequest) OrphanDependents(orphanDependents bool) ApiDeleteNamespacedNetworkAttachmentDefinitionRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteNamespacedNetworkAttachmentDefinitionRequest) PropagationPolicy(propagationPolicy string) ApiDeleteNamespacedNetworkAttachmentDefinitionRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteNamespacedNetworkAttachmentDefinitionRequest) Execute() (*K8sCniCncfIoV1NetworkAttachmentDefinition, *http.Response, error) {
	return r.ApiService.DeleteNamespacedNetworkAttachmentDefinitionExecute(r)
}

/*
DeleteNamespacedNetworkAttachmentDefinition Delete a Namespaced Network Attachment Definition

Delete a NetworkAttachmentDefinition object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiDeleteNamespacedNetworkAttachmentDefinitionRequest
*/
func (a *NetworksAPIService) DeleteNamespacedNetworkAttachmentDefinition(ctx context.Context, name string, namespace string) ApiDeleteNamespacedNetworkAttachmentDefinitionRequest {
	return ApiDeleteNamespacedNetworkAttachmentDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return K8sCniCncfIoV1NetworkAttachmentDefinition
func (a *NetworksAPIService) DeleteNamespacedNetworkAttachmentDefinitionExecute(r ApiDeleteNamespacedNetworkAttachmentDefinitionRequest) (*K8sCniCncfIoV1NetworkAttachmentDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *K8sCniCncfIoV1NetworkAttachmentDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.DeleteNamespacedNetworkAttachmentDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/k8s.cni.cncf.io/v1/namespaces/{namespace}/network-attachment-definitions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.k8sIoV1DeleteOptions == nil {
		return localVarReturnValue, nil, reportError("k8sIoV1DeleteOptions is required and must be specified")
	}

	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.k8sIoV1DeleteOptions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNamespacedNodeNetworkRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	name string
	namespace string
	k8sIoV1DeleteOptions *K8sIoV1DeleteOptions
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
}

func (r ApiDeleteNamespacedNodeNetworkRequest) K8sIoV1DeleteOptions(k8sIoV1DeleteOptions K8sIoV1DeleteOptions) ApiDeleteNamespacedNodeNetworkRequest {
	r.k8sIoV1DeleteOptions = &k8sIoV1DeleteOptions
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteNamespacedNodeNetworkRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteNamespacedNodeNetworkRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteNamespacedNodeNetworkRequest) OrphanDependents(orphanDependents bool) ApiDeleteNamespacedNodeNetworkRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteNamespacedNodeNetworkRequest) PropagationPolicy(propagationPolicy string) ApiDeleteNamespacedNodeNetworkRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteNamespacedNodeNetworkRequest) Execute() (*NetworkHarvesterhciIoV1beta1NodeNetwork, *http.Response, error) {
	return r.ApiService.DeleteNamespacedNodeNetworkExecute(r)
}

/*
DeleteNamespacedNodeNetwork Delete a Namespaced Node Network

Delete a NodeNetwork object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiDeleteNamespacedNodeNetworkRequest
*/
func (a *NetworksAPIService) DeleteNamespacedNodeNetwork(ctx context.Context, name string, namespace string) ApiDeleteNamespacedNodeNetworkRequest {
	return ApiDeleteNamespacedNodeNetworkRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return NetworkHarvesterhciIoV1beta1NodeNetwork
func (a *NetworksAPIService) DeleteNamespacedNodeNetworkExecute(r ApiDeleteNamespacedNodeNetworkRequest) (*NetworkHarvesterhciIoV1beta1NodeNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkHarvesterhciIoV1beta1NodeNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.DeleteNamespacedNodeNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/network.harvesterhci.io/v1beta1/nodenetworks/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.k8sIoV1DeleteOptions == nil {
		return localVarReturnValue, nil, reportError("k8sIoV1DeleteOptions is required and must be specified")
	}

	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.k8sIoV1DeleteOptions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNamespacedClusterNetworkRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	namespace string
	continue_ *string
	fieldSelector *string
	includeUninitialized *bool
	labelSelector *string
	limit *int32
	resourceVersion *string
	timeoutSeconds *int32
	watch *bool
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListNamespacedClusterNetworkRequest) Continue_(continue_ string) ApiListNamespacedClusterNetworkRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListNamespacedClusterNetworkRequest) FieldSelector(fieldSelector string) ApiListNamespacedClusterNetworkRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// If true, partially initialized resources are included in the response.
func (r ApiListNamespacedClusterNetworkRequest) IncludeUninitialized(includeUninitialized bool) ApiListNamespacedClusterNetworkRequest {
	r.includeUninitialized = &includeUninitialized
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything
func (r ApiListNamespacedClusterNetworkRequest) LabelSelector(labelSelector string) ApiListNamespacedClusterNetworkRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListNamespacedClusterNetworkRequest) Limit(limit int32) ApiListNamespacedClusterNetworkRequest {
	r.limit = &limit
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
func (r ApiListNamespacedClusterNetworkRequest) ResourceVersion(resourceVersion string) ApiListNamespacedClusterNetworkRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// TimeoutSeconds for the list/watch call.
func (r ApiListNamespacedClusterNetworkRequest) TimeoutSeconds(timeoutSeconds int32) ApiListNamespacedClusterNetworkRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListNamespacedClusterNetworkRequest) Watch(watch bool) ApiListNamespacedClusterNetworkRequest {
	r.watch = &watch
	return r
}

func (r ApiListNamespacedClusterNetworkRequest) Execute() (*NetworkHarvesterhciIoV1beta1ClusterNetworkList, *http.Response, error) {
	return r.ApiService.ListNamespacedClusterNetworkExecute(r)
}

/*
ListNamespacedClusterNetwork List Namespaced Cluster Networks

Get a list of ClusterNetwork objects in a namespace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiListNamespacedClusterNetworkRequest
*/
func (a *NetworksAPIService) ListNamespacedClusterNetwork(ctx context.Context, namespace string) ApiListNamespacedClusterNetworkRequest {
	return ApiListNamespacedClusterNetworkRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return NetworkHarvesterhciIoV1beta1ClusterNetworkList
func (a *NetworksAPIService) ListNamespacedClusterNetworkExecute(r ApiListNamespacedClusterNetworkRequest) (*NetworkHarvesterhciIoV1beta1ClusterNetworkList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkHarvesterhciIoV1beta1ClusterNetworkList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.ListNamespacedClusterNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/network.harvesterhci.io/v1beta1/clusternetworks"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.includeUninitialized != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeUninitialized", r.includeUninitialized, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNamespacedNetworkAttachmentDefinitionRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	namespace string
	continue_ *string
	fieldSelector *string
	includeUninitialized *bool
	labelSelector *string
	limit *int32
	resourceVersion *string
	timeoutSeconds *int32
	watch *bool
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListNamespacedNetworkAttachmentDefinitionRequest) Continue_(continue_ string) ApiListNamespacedNetworkAttachmentDefinitionRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListNamespacedNetworkAttachmentDefinitionRequest) FieldSelector(fieldSelector string) ApiListNamespacedNetworkAttachmentDefinitionRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// If true, partially initialized resources are included in the response.
func (r ApiListNamespacedNetworkAttachmentDefinitionRequest) IncludeUninitialized(includeUninitialized bool) ApiListNamespacedNetworkAttachmentDefinitionRequest {
	r.includeUninitialized = &includeUninitialized
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything
func (r ApiListNamespacedNetworkAttachmentDefinitionRequest) LabelSelector(labelSelector string) ApiListNamespacedNetworkAttachmentDefinitionRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListNamespacedNetworkAttachmentDefinitionRequest) Limit(limit int32) ApiListNamespacedNetworkAttachmentDefinitionRequest {
	r.limit = &limit
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
func (r ApiListNamespacedNetworkAttachmentDefinitionRequest) ResourceVersion(resourceVersion string) ApiListNamespacedNetworkAttachmentDefinitionRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// TimeoutSeconds for the list/watch call.
func (r ApiListNamespacedNetworkAttachmentDefinitionRequest) TimeoutSeconds(timeoutSeconds int32) ApiListNamespacedNetworkAttachmentDefinitionRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListNamespacedNetworkAttachmentDefinitionRequest) Watch(watch bool) ApiListNamespacedNetworkAttachmentDefinitionRequest {
	r.watch = &watch
	return r
}

func (r ApiListNamespacedNetworkAttachmentDefinitionRequest) Execute() (*K8sCniCncfIoV1NetworkAttachmentDefinitionList, *http.Response, error) {
	return r.ApiService.ListNamespacedNetworkAttachmentDefinitionExecute(r)
}

/*
ListNamespacedNetworkAttachmentDefinition List Namespaced Network Attachment Definitions

Get a list of NetworkAttachmentDefinition objects in a namespace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiListNamespacedNetworkAttachmentDefinitionRequest
*/
func (a *NetworksAPIService) ListNamespacedNetworkAttachmentDefinition(ctx context.Context, namespace string) ApiListNamespacedNetworkAttachmentDefinitionRequest {
	return ApiListNamespacedNetworkAttachmentDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return K8sCniCncfIoV1NetworkAttachmentDefinitionList
func (a *NetworksAPIService) ListNamespacedNetworkAttachmentDefinitionExecute(r ApiListNamespacedNetworkAttachmentDefinitionRequest) (*K8sCniCncfIoV1NetworkAttachmentDefinitionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *K8sCniCncfIoV1NetworkAttachmentDefinitionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.ListNamespacedNetworkAttachmentDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/k8s.cni.cncf.io/v1/namespaces/{namespace}/network-attachment-definitions"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.includeUninitialized != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeUninitialized", r.includeUninitialized, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNamespacedNodeNetworkRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	namespace string
	continue_ *string
	fieldSelector *string
	includeUninitialized *bool
	labelSelector *string
	limit *int32
	resourceVersion *string
	timeoutSeconds *int32
	watch *bool
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListNamespacedNodeNetworkRequest) Continue_(continue_ string) ApiListNamespacedNodeNetworkRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListNamespacedNodeNetworkRequest) FieldSelector(fieldSelector string) ApiListNamespacedNodeNetworkRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// If true, partially initialized resources are included in the response.
func (r ApiListNamespacedNodeNetworkRequest) IncludeUninitialized(includeUninitialized bool) ApiListNamespacedNodeNetworkRequest {
	r.includeUninitialized = &includeUninitialized
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything
func (r ApiListNamespacedNodeNetworkRequest) LabelSelector(labelSelector string) ApiListNamespacedNodeNetworkRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListNamespacedNodeNetworkRequest) Limit(limit int32) ApiListNamespacedNodeNetworkRequest {
	r.limit = &limit
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
func (r ApiListNamespacedNodeNetworkRequest) ResourceVersion(resourceVersion string) ApiListNamespacedNodeNetworkRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// TimeoutSeconds for the list/watch call.
func (r ApiListNamespacedNodeNetworkRequest) TimeoutSeconds(timeoutSeconds int32) ApiListNamespacedNodeNetworkRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListNamespacedNodeNetworkRequest) Watch(watch bool) ApiListNamespacedNodeNetworkRequest {
	r.watch = &watch
	return r
}

func (r ApiListNamespacedNodeNetworkRequest) Execute() (*NetworkHarvesterhciIoV1beta1NodeNetworkList, *http.Response, error) {
	return r.ApiService.ListNamespacedNodeNetworkExecute(r)
}

/*
ListNamespacedNodeNetwork List Namespaced Node Networks

Get a list of NodeNetwork objects in a namespace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiListNamespacedNodeNetworkRequest
*/
func (a *NetworksAPIService) ListNamespacedNodeNetwork(ctx context.Context, namespace string) ApiListNamespacedNodeNetworkRequest {
	return ApiListNamespacedNodeNetworkRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return NetworkHarvesterhciIoV1beta1NodeNetworkList
func (a *NetworksAPIService) ListNamespacedNodeNetworkExecute(r ApiListNamespacedNodeNetworkRequest) (*NetworkHarvesterhciIoV1beta1NodeNetworkList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkHarvesterhciIoV1beta1NodeNetworkList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.ListNamespacedNodeNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/network.harvesterhci.io/v1beta1/nodenetworks"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.includeUninitialized != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeUninitialized", r.includeUninitialized, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNetworkAttachmentDefinitionForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	continue_ *string
	fieldSelector *string
	includeUninitialized *bool
	labelSelector *string
	limit *int32
	resourceVersion *string
	timeoutSeconds *int32
	watch *bool
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListNetworkAttachmentDefinitionForAllNamespacesRequest) Continue_(continue_ string) ApiListNetworkAttachmentDefinitionForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListNetworkAttachmentDefinitionForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiListNetworkAttachmentDefinitionForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// If true, partially initialized resources are included in the response.
func (r ApiListNetworkAttachmentDefinitionForAllNamespacesRequest) IncludeUninitialized(includeUninitialized bool) ApiListNetworkAttachmentDefinitionForAllNamespacesRequest {
	r.includeUninitialized = &includeUninitialized
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything
func (r ApiListNetworkAttachmentDefinitionForAllNamespacesRequest) LabelSelector(labelSelector string) ApiListNetworkAttachmentDefinitionForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListNetworkAttachmentDefinitionForAllNamespacesRequest) Limit(limit int32) ApiListNetworkAttachmentDefinitionForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
func (r ApiListNetworkAttachmentDefinitionForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiListNetworkAttachmentDefinitionForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// TimeoutSeconds for the list/watch call.
func (r ApiListNetworkAttachmentDefinitionForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiListNetworkAttachmentDefinitionForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListNetworkAttachmentDefinitionForAllNamespacesRequest) Watch(watch bool) ApiListNetworkAttachmentDefinitionForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiListNetworkAttachmentDefinitionForAllNamespacesRequest) Execute() (*K8sCniCncfIoV1NetworkAttachmentDefinitionList, *http.Response, error) {
	return r.ApiService.ListNetworkAttachmentDefinitionForAllNamespacesExecute(r)
}

/*
ListNetworkAttachmentDefinitionForAllNamespaces List Network Attachment Definitions For All Namespaces

Get a list of all NetworkAttachmentDefinition objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListNetworkAttachmentDefinitionForAllNamespacesRequest
*/
func (a *NetworksAPIService) ListNetworkAttachmentDefinitionForAllNamespaces(ctx context.Context) ApiListNetworkAttachmentDefinitionForAllNamespacesRequest {
	return ApiListNetworkAttachmentDefinitionForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return K8sCniCncfIoV1NetworkAttachmentDefinitionList
func (a *NetworksAPIService) ListNetworkAttachmentDefinitionForAllNamespacesExecute(r ApiListNetworkAttachmentDefinitionForAllNamespacesRequest) (*K8sCniCncfIoV1NetworkAttachmentDefinitionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *K8sCniCncfIoV1NetworkAttachmentDefinitionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.ListNetworkAttachmentDefinitionForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/k8s.cni.cncf.io/v1/network-attachment-definitions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.includeUninitialized != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeUninitialized", r.includeUninitialized, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchNamespacedClusterNetworkRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	name string
	namespace string
	body *map[string]interface{}
}

func (r ApiPatchNamespacedClusterNetworkRequest) Body(body map[string]interface{}) ApiPatchNamespacedClusterNetworkRequest {
	r.body = &body
	return r
}

func (r ApiPatchNamespacedClusterNetworkRequest) Execute() (*NetworkHarvesterhciIoV1beta1ClusterNetwork, *http.Response, error) {
	return r.ApiService.PatchNamespacedClusterNetworkExecute(r)
}

/*
PatchNamespacedClusterNetwork Patch a Namespaced Cluster Network

Patch a ClusterNetwork object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiPatchNamespacedClusterNetworkRequest
*/
func (a *NetworksAPIService) PatchNamespacedClusterNetwork(ctx context.Context, name string, namespace string) ApiPatchNamespacedClusterNetworkRequest {
	return ApiPatchNamespacedClusterNetworkRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return NetworkHarvesterhciIoV1beta1ClusterNetwork
func (a *NetworksAPIService) PatchNamespacedClusterNetworkExecute(r ApiPatchNamespacedClusterNetworkRequest) (*NetworkHarvesterhciIoV1beta1ClusterNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkHarvesterhciIoV1beta1ClusterNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.PatchNamespacedClusterNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/network.harvesterhci.io/v1beta1/clusternetworks/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchNamespacedNetworkAttachmentDefinitionRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	name string
	namespace string
	body *map[string]interface{}
}

func (r ApiPatchNamespacedNetworkAttachmentDefinitionRequest) Body(body map[string]interface{}) ApiPatchNamespacedNetworkAttachmentDefinitionRequest {
	r.body = &body
	return r
}

func (r ApiPatchNamespacedNetworkAttachmentDefinitionRequest) Execute() (*K8sCniCncfIoV1NetworkAttachmentDefinition, *http.Response, error) {
	return r.ApiService.PatchNamespacedNetworkAttachmentDefinitionExecute(r)
}

/*
PatchNamespacedNetworkAttachmentDefinition Patch a Namespaced Network Attachment Definition

Patch a NetworkAttachmentDefinition object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiPatchNamespacedNetworkAttachmentDefinitionRequest
*/
func (a *NetworksAPIService) PatchNamespacedNetworkAttachmentDefinition(ctx context.Context, name string, namespace string) ApiPatchNamespacedNetworkAttachmentDefinitionRequest {
	return ApiPatchNamespacedNetworkAttachmentDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return K8sCniCncfIoV1NetworkAttachmentDefinition
func (a *NetworksAPIService) PatchNamespacedNetworkAttachmentDefinitionExecute(r ApiPatchNamespacedNetworkAttachmentDefinitionRequest) (*K8sCniCncfIoV1NetworkAttachmentDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *K8sCniCncfIoV1NetworkAttachmentDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.PatchNamespacedNetworkAttachmentDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/k8s.cni.cncf.io/v1/namespaces/{namespace}/network-attachment-definitions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchNamespacedNodeNetworkRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	name string
	namespace string
	body *map[string]interface{}
}

func (r ApiPatchNamespacedNodeNetworkRequest) Body(body map[string]interface{}) ApiPatchNamespacedNodeNetworkRequest {
	r.body = &body
	return r
}

func (r ApiPatchNamespacedNodeNetworkRequest) Execute() (*NetworkHarvesterhciIoV1beta1NodeNetwork, *http.Response, error) {
	return r.ApiService.PatchNamespacedNodeNetworkExecute(r)
}

/*
PatchNamespacedNodeNetwork Patch a Namespaced Node Network

Patch a NodeNetwork object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiPatchNamespacedNodeNetworkRequest
*/
func (a *NetworksAPIService) PatchNamespacedNodeNetwork(ctx context.Context, name string, namespace string) ApiPatchNamespacedNodeNetworkRequest {
	return ApiPatchNamespacedNodeNetworkRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return NetworkHarvesterhciIoV1beta1NodeNetwork
func (a *NetworksAPIService) PatchNamespacedNodeNetworkExecute(r ApiPatchNamespacedNodeNetworkRequest) (*NetworkHarvesterhciIoV1beta1NodeNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkHarvesterhciIoV1beta1NodeNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.PatchNamespacedNodeNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/network.harvesterhci.io/v1beta1/nodenetworks/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadNamespacedClusterNetworkRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	name string
	namespace string
	exact *bool
	export *bool
}

// Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
func (r ApiReadNamespacedClusterNetworkRequest) Exact(exact bool) ApiReadNamespacedClusterNetworkRequest {
	r.exact = &exact
	return r
}

// Should this value be exported. Export strips fields that a user can not specify.
func (r ApiReadNamespacedClusterNetworkRequest) Export(export bool) ApiReadNamespacedClusterNetworkRequest {
	r.export = &export
	return r
}

func (r ApiReadNamespacedClusterNetworkRequest) Execute() (*NetworkHarvesterhciIoV1beta1ClusterNetwork, *http.Response, error) {
	return r.ApiService.ReadNamespacedClusterNetworkExecute(r)
}

/*
ReadNamespacedClusterNetwork Read a Namespaced Cluster Network

Get a ClusterNetwork object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiReadNamespacedClusterNetworkRequest
*/
func (a *NetworksAPIService) ReadNamespacedClusterNetwork(ctx context.Context, name string, namespace string) ApiReadNamespacedClusterNetworkRequest {
	return ApiReadNamespacedClusterNetworkRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return NetworkHarvesterhciIoV1beta1ClusterNetwork
func (a *NetworksAPIService) ReadNamespacedClusterNetworkExecute(r ApiReadNamespacedClusterNetworkRequest) (*NetworkHarvesterhciIoV1beta1ClusterNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkHarvesterhciIoV1beta1ClusterNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.ReadNamespacedClusterNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/network.harvesterhci.io/v1beta1/clusternetworks/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.exact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exact", r.exact, "")
	}
	if r.export != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "export", r.export, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadNamespacedNetworkAttachmentDefinitionRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	name string
	namespace string
	exact *bool
	export *bool
}

// Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
func (r ApiReadNamespacedNetworkAttachmentDefinitionRequest) Exact(exact bool) ApiReadNamespacedNetworkAttachmentDefinitionRequest {
	r.exact = &exact
	return r
}

// Should this value be exported. Export strips fields that a user can not specify.
func (r ApiReadNamespacedNetworkAttachmentDefinitionRequest) Export(export bool) ApiReadNamespacedNetworkAttachmentDefinitionRequest {
	r.export = &export
	return r
}

func (r ApiReadNamespacedNetworkAttachmentDefinitionRequest) Execute() (*K8sCniCncfIoV1NetworkAttachmentDefinition, *http.Response, error) {
	return r.ApiService.ReadNamespacedNetworkAttachmentDefinitionExecute(r)
}

/*
ReadNamespacedNetworkAttachmentDefinition Read a Namespaced Network Attachment Definition

Get a NetworkAttachmentDefinition object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiReadNamespacedNetworkAttachmentDefinitionRequest
*/
func (a *NetworksAPIService) ReadNamespacedNetworkAttachmentDefinition(ctx context.Context, name string, namespace string) ApiReadNamespacedNetworkAttachmentDefinitionRequest {
	return ApiReadNamespacedNetworkAttachmentDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return K8sCniCncfIoV1NetworkAttachmentDefinition
func (a *NetworksAPIService) ReadNamespacedNetworkAttachmentDefinitionExecute(r ApiReadNamespacedNetworkAttachmentDefinitionRequest) (*K8sCniCncfIoV1NetworkAttachmentDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *K8sCniCncfIoV1NetworkAttachmentDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.ReadNamespacedNetworkAttachmentDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/k8s.cni.cncf.io/v1/namespaces/{namespace}/network-attachment-definitions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.exact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exact", r.exact, "")
	}
	if r.export != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "export", r.export, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadNamespacedNodeNetworkRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	name string
	namespace string
	exact *bool
	export *bool
}

// Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
func (r ApiReadNamespacedNodeNetworkRequest) Exact(exact bool) ApiReadNamespacedNodeNetworkRequest {
	r.exact = &exact
	return r
}

// Should this value be exported. Export strips fields that a user can not specify.
func (r ApiReadNamespacedNodeNetworkRequest) Export(export bool) ApiReadNamespacedNodeNetworkRequest {
	r.export = &export
	return r
}

func (r ApiReadNamespacedNodeNetworkRequest) Execute() (*NetworkHarvesterhciIoV1beta1NodeNetwork, *http.Response, error) {
	return r.ApiService.ReadNamespacedNodeNetworkExecute(r)
}

/*
ReadNamespacedNodeNetwork Read a Namespaced Node Network

Get a NodeNetwork object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiReadNamespacedNodeNetworkRequest
*/
func (a *NetworksAPIService) ReadNamespacedNodeNetwork(ctx context.Context, name string, namespace string) ApiReadNamespacedNodeNetworkRequest {
	return ApiReadNamespacedNodeNetworkRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return NetworkHarvesterhciIoV1beta1NodeNetwork
func (a *NetworksAPIService) ReadNamespacedNodeNetworkExecute(r ApiReadNamespacedNodeNetworkRequest) (*NetworkHarvesterhciIoV1beta1NodeNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkHarvesterhciIoV1beta1NodeNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.ReadNamespacedNodeNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/network.harvesterhci.io/v1beta1/nodenetworks/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.exact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exact", r.exact, "")
	}
	if r.export != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "export", r.export, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceNamespacedClusterNetworkRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	name string
	namespace string
	networkHarvesterhciIoV1beta1ClusterNetwork *NetworkHarvesterhciIoV1beta1ClusterNetwork
}

func (r ApiReplaceNamespacedClusterNetworkRequest) NetworkHarvesterhciIoV1beta1ClusterNetwork(networkHarvesterhciIoV1beta1ClusterNetwork NetworkHarvesterhciIoV1beta1ClusterNetwork) ApiReplaceNamespacedClusterNetworkRequest {
	r.networkHarvesterhciIoV1beta1ClusterNetwork = &networkHarvesterhciIoV1beta1ClusterNetwork
	return r
}

func (r ApiReplaceNamespacedClusterNetworkRequest) Execute() (*NetworkHarvesterhciIoV1beta1ClusterNetwork, *http.Response, error) {
	return r.ApiService.ReplaceNamespacedClusterNetworkExecute(r)
}

/*
ReplaceNamespacedClusterNetwork Replace a Namespaced Cluster Network

Update a ClusterNetwork object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiReplaceNamespacedClusterNetworkRequest
*/
func (a *NetworksAPIService) ReplaceNamespacedClusterNetwork(ctx context.Context, name string, namespace string) ApiReplaceNamespacedClusterNetworkRequest {
	return ApiReplaceNamespacedClusterNetworkRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return NetworkHarvesterhciIoV1beta1ClusterNetwork
func (a *NetworksAPIService) ReplaceNamespacedClusterNetworkExecute(r ApiReplaceNamespacedClusterNetworkRequest) (*NetworkHarvesterhciIoV1beta1ClusterNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkHarvesterhciIoV1beta1ClusterNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.ReplaceNamespacedClusterNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/network.harvesterhci.io/v1beta1/clusternetworks/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.networkHarvesterhciIoV1beta1ClusterNetwork == nil {
		return localVarReturnValue, nil, reportError("networkHarvesterhciIoV1beta1ClusterNetwork is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.networkHarvesterhciIoV1beta1ClusterNetwork
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceNamespacedNetworkAttachmentDefinitionRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	name string
	namespace string
	k8sCniCncfIoV1NetworkAttachmentDefinition *K8sCniCncfIoV1NetworkAttachmentDefinition
}

func (r ApiReplaceNamespacedNetworkAttachmentDefinitionRequest) K8sCniCncfIoV1NetworkAttachmentDefinition(k8sCniCncfIoV1NetworkAttachmentDefinition K8sCniCncfIoV1NetworkAttachmentDefinition) ApiReplaceNamespacedNetworkAttachmentDefinitionRequest {
	r.k8sCniCncfIoV1NetworkAttachmentDefinition = &k8sCniCncfIoV1NetworkAttachmentDefinition
	return r
}

func (r ApiReplaceNamespacedNetworkAttachmentDefinitionRequest) Execute() (*K8sCniCncfIoV1NetworkAttachmentDefinition, *http.Response, error) {
	return r.ApiService.ReplaceNamespacedNetworkAttachmentDefinitionExecute(r)
}

/*
ReplaceNamespacedNetworkAttachmentDefinition Replace a Namespaced Network Attachment Definition

Update a NetworkAttachmentDefinition object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiReplaceNamespacedNetworkAttachmentDefinitionRequest
*/
func (a *NetworksAPIService) ReplaceNamespacedNetworkAttachmentDefinition(ctx context.Context, name string, namespace string) ApiReplaceNamespacedNetworkAttachmentDefinitionRequest {
	return ApiReplaceNamespacedNetworkAttachmentDefinitionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return K8sCniCncfIoV1NetworkAttachmentDefinition
func (a *NetworksAPIService) ReplaceNamespacedNetworkAttachmentDefinitionExecute(r ApiReplaceNamespacedNetworkAttachmentDefinitionRequest) (*K8sCniCncfIoV1NetworkAttachmentDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *K8sCniCncfIoV1NetworkAttachmentDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.ReplaceNamespacedNetworkAttachmentDefinition")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/k8s.cni.cncf.io/v1/namespaces/{namespace}/network-attachment-definitions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.k8sCniCncfIoV1NetworkAttachmentDefinition == nil {
		return localVarReturnValue, nil, reportError("k8sCniCncfIoV1NetworkAttachmentDefinition is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.k8sCniCncfIoV1NetworkAttachmentDefinition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceNamespacedNodeNetworkRequest struct {
	ctx context.Context
	ApiService *NetworksAPIService
	name string
	namespace string
	networkHarvesterhciIoV1beta1NodeNetwork *NetworkHarvesterhciIoV1beta1NodeNetwork
}

func (r ApiReplaceNamespacedNodeNetworkRequest) NetworkHarvesterhciIoV1beta1NodeNetwork(networkHarvesterhciIoV1beta1NodeNetwork NetworkHarvesterhciIoV1beta1NodeNetwork) ApiReplaceNamespacedNodeNetworkRequest {
	r.networkHarvesterhciIoV1beta1NodeNetwork = &networkHarvesterhciIoV1beta1NodeNetwork
	return r
}

func (r ApiReplaceNamespacedNodeNetworkRequest) Execute() (*NetworkHarvesterhciIoV1beta1NodeNetwork, *http.Response, error) {
	return r.ApiService.ReplaceNamespacedNodeNetworkExecute(r)
}

/*
ReplaceNamespacedNodeNetwork Replace a Namespaced Node Network

Update a NodeNetwork object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiReplaceNamespacedNodeNetworkRequest
*/
func (a *NetworksAPIService) ReplaceNamespacedNodeNetwork(ctx context.Context, name string, namespace string) ApiReplaceNamespacedNodeNetworkRequest {
	return ApiReplaceNamespacedNodeNetworkRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return NetworkHarvesterhciIoV1beta1NodeNetwork
func (a *NetworksAPIService) ReplaceNamespacedNodeNetworkExecute(r ApiReplaceNamespacedNodeNetworkRequest) (*NetworkHarvesterhciIoV1beta1NodeNetwork, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkHarvesterhciIoV1beta1NodeNetwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworksAPIService.ReplaceNamespacedNodeNetwork")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/network.harvesterhci.io/v1beta1/nodenetworks/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.networkHarvesterhciIoV1beta1NodeNetwork == nil {
		return localVarReturnValue, nil, reportError("networkHarvesterhciIoV1beta1NodeNetwork is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.networkHarvesterhciIoV1beta1NodeNetwork
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
