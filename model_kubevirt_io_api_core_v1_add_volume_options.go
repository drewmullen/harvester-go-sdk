/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KubevirtIoApiCoreV1AddVolumeOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubevirtIoApiCoreV1AddVolumeOptions{}

// KubevirtIoApiCoreV1AddVolumeOptions AddVolumeOptions is provided when dynamically hot plugging a volume and disk
type KubevirtIoApiCoreV1AddVolumeOptions struct {
	// Disk represents the hotplug disk that will be plugged into the running VMI
	Disk KubevirtIoApiCoreV1Disk `json:"disk"`
	// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
	DryRun []string `json:"dryRun,omitempty"`
	// Name represents the name that will be used to map the disk to the corresponding volume. This overrides any name set inside the Disk struct itself.
	Name string `json:"name"`
	// VolumeSource represents the source of the volume to map to the disk.
	VolumeSource KubevirtIoApiCoreV1HotplugVolumeSource `json:"volumeSource"`
}

type _KubevirtIoApiCoreV1AddVolumeOptions KubevirtIoApiCoreV1AddVolumeOptions

// NewKubevirtIoApiCoreV1AddVolumeOptions instantiates a new KubevirtIoApiCoreV1AddVolumeOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubevirtIoApiCoreV1AddVolumeOptions(disk KubevirtIoApiCoreV1Disk, name string, volumeSource KubevirtIoApiCoreV1HotplugVolumeSource) *KubevirtIoApiCoreV1AddVolumeOptions {
	this := KubevirtIoApiCoreV1AddVolumeOptions{}
	this.Disk = disk
	this.Name = name
	this.VolumeSource = volumeSource
	return &this
}

// NewKubevirtIoApiCoreV1AddVolumeOptionsWithDefaults instantiates a new KubevirtIoApiCoreV1AddVolumeOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubevirtIoApiCoreV1AddVolumeOptionsWithDefaults() *KubevirtIoApiCoreV1AddVolumeOptions {
	this := KubevirtIoApiCoreV1AddVolumeOptions{}
	var name string = ""
	this.Name = name
	return &this
}

// GetDisk returns the Disk field value
func (o *KubevirtIoApiCoreV1AddVolumeOptions) GetDisk() KubevirtIoApiCoreV1Disk {
	if o == nil {
		var ret KubevirtIoApiCoreV1Disk
		return ret
	}

	return o.Disk
}

// GetDiskOk returns a tuple with the Disk field value
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1AddVolumeOptions) GetDiskOk() (*KubevirtIoApiCoreV1Disk, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disk, true
}

// SetDisk sets field value
func (o *KubevirtIoApiCoreV1AddVolumeOptions) SetDisk(v KubevirtIoApiCoreV1Disk) {
	o.Disk = v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1AddVolumeOptions) GetDryRun() []string {
	if o == nil || IsNil(o.DryRun) {
		var ret []string
		return ret
	}
	return o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1AddVolumeOptions) GetDryRunOk() ([]string, bool) {
	if o == nil || IsNil(o.DryRun) {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1AddVolumeOptions) HasDryRun() bool {
	if o != nil && !IsNil(o.DryRun) {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given []string and assigns it to the DryRun field.
func (o *KubevirtIoApiCoreV1AddVolumeOptions) SetDryRun(v []string) {
	o.DryRun = v
}

// GetName returns the Name field value
func (o *KubevirtIoApiCoreV1AddVolumeOptions) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1AddVolumeOptions) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KubevirtIoApiCoreV1AddVolumeOptions) SetName(v string) {
	o.Name = v
}

// GetVolumeSource returns the VolumeSource field value
func (o *KubevirtIoApiCoreV1AddVolumeOptions) GetVolumeSource() KubevirtIoApiCoreV1HotplugVolumeSource {
	if o == nil {
		var ret KubevirtIoApiCoreV1HotplugVolumeSource
		return ret
	}

	return o.VolumeSource
}

// GetVolumeSourceOk returns a tuple with the VolumeSource field value
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1AddVolumeOptions) GetVolumeSourceOk() (*KubevirtIoApiCoreV1HotplugVolumeSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeSource, true
}

// SetVolumeSource sets field value
func (o *KubevirtIoApiCoreV1AddVolumeOptions) SetVolumeSource(v KubevirtIoApiCoreV1HotplugVolumeSource) {
	o.VolumeSource = v
}

func (o KubevirtIoApiCoreV1AddVolumeOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubevirtIoApiCoreV1AddVolumeOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["disk"] = o.Disk
	if !IsNil(o.DryRun) {
		toSerialize["dryRun"] = o.DryRun
	}
	toSerialize["name"] = o.Name
	toSerialize["volumeSource"] = o.VolumeSource
	return toSerialize, nil
}

func (o *KubevirtIoApiCoreV1AddVolumeOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"disk",
		"name",
		"volumeSource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubevirtIoApiCoreV1AddVolumeOptions := _KubevirtIoApiCoreV1AddVolumeOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKubevirtIoApiCoreV1AddVolumeOptions)

	if err != nil {
		return err
	}

	*o = KubevirtIoApiCoreV1AddVolumeOptions(varKubevirtIoApiCoreV1AddVolumeOptions)

	return err
}

type NullableKubevirtIoApiCoreV1AddVolumeOptions struct {
	value *KubevirtIoApiCoreV1AddVolumeOptions
	isSet bool
}

func (v NullableKubevirtIoApiCoreV1AddVolumeOptions) Get() *KubevirtIoApiCoreV1AddVolumeOptions {
	return v.value
}

func (v *NullableKubevirtIoApiCoreV1AddVolumeOptions) Set(val *KubevirtIoApiCoreV1AddVolumeOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableKubevirtIoApiCoreV1AddVolumeOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableKubevirtIoApiCoreV1AddVolumeOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubevirtIoApiCoreV1AddVolumeOptions(val *KubevirtIoApiCoreV1AddVolumeOptions) *NullableKubevirtIoApiCoreV1AddVolumeOptions {
	return &NullableKubevirtIoApiCoreV1AddVolumeOptions{value: val, isSet: true}
}

func (v NullableKubevirtIoApiCoreV1AddVolumeOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubevirtIoApiCoreV1AddVolumeOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


