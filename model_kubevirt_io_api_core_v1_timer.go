/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
)

// checks if the KubevirtIoApiCoreV1Timer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubevirtIoApiCoreV1Timer{}

// KubevirtIoApiCoreV1Timer Represents all available timers in a vmi.
type KubevirtIoApiCoreV1Timer struct {
	// HPET (High Precision Event Timer) - multiple timers with periodic interrupts.
	Hpet *KubevirtIoApiCoreV1HPETTimer `json:"hpet,omitempty"`
	// Hyperv (Hypervclock) - lets guests read the host’s wall clock time (paravirtualized). For windows guests.
	Hyperv *KubevirtIoApiCoreV1HypervTimer `json:"hyperv,omitempty"`
	// KVM  (KVM clock) - lets guests read the host’s wall clock time (paravirtualized). For linux guests.
	Kvm *KubevirtIoApiCoreV1KVMTimer `json:"kvm,omitempty"`
	// PIT (Programmable Interval Timer) - a timer with periodic interrupts.
	Pit *KubevirtIoApiCoreV1PITTimer `json:"pit,omitempty"`
	// RTC (Real Time Clock) - a continuously running timer with periodic interrupts.
	Rtc *KubevirtIoApiCoreV1RTCTimer `json:"rtc,omitempty"`
}

// NewKubevirtIoApiCoreV1Timer instantiates a new KubevirtIoApiCoreV1Timer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubevirtIoApiCoreV1Timer() *KubevirtIoApiCoreV1Timer {
	this := KubevirtIoApiCoreV1Timer{}
	return &this
}

// NewKubevirtIoApiCoreV1TimerWithDefaults instantiates a new KubevirtIoApiCoreV1Timer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubevirtIoApiCoreV1TimerWithDefaults() *KubevirtIoApiCoreV1Timer {
	this := KubevirtIoApiCoreV1Timer{}
	return &this
}

// GetHpet returns the Hpet field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Timer) GetHpet() KubevirtIoApiCoreV1HPETTimer {
	if o == nil || IsNil(o.Hpet) {
		var ret KubevirtIoApiCoreV1HPETTimer
		return ret
	}
	return *o.Hpet
}

// GetHpetOk returns a tuple with the Hpet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Timer) GetHpetOk() (*KubevirtIoApiCoreV1HPETTimer, bool) {
	if o == nil || IsNil(o.Hpet) {
		return nil, false
	}
	return o.Hpet, true
}

// HasHpet returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Timer) HasHpet() bool {
	if o != nil && !IsNil(o.Hpet) {
		return true
	}

	return false
}

// SetHpet gets a reference to the given KubevirtIoApiCoreV1HPETTimer and assigns it to the Hpet field.
func (o *KubevirtIoApiCoreV1Timer) SetHpet(v KubevirtIoApiCoreV1HPETTimer) {
	o.Hpet = &v
}

// GetHyperv returns the Hyperv field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Timer) GetHyperv() KubevirtIoApiCoreV1HypervTimer {
	if o == nil || IsNil(o.Hyperv) {
		var ret KubevirtIoApiCoreV1HypervTimer
		return ret
	}
	return *o.Hyperv
}

// GetHypervOk returns a tuple with the Hyperv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Timer) GetHypervOk() (*KubevirtIoApiCoreV1HypervTimer, bool) {
	if o == nil || IsNil(o.Hyperv) {
		return nil, false
	}
	return o.Hyperv, true
}

// HasHyperv returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Timer) HasHyperv() bool {
	if o != nil && !IsNil(o.Hyperv) {
		return true
	}

	return false
}

// SetHyperv gets a reference to the given KubevirtIoApiCoreV1HypervTimer and assigns it to the Hyperv field.
func (o *KubevirtIoApiCoreV1Timer) SetHyperv(v KubevirtIoApiCoreV1HypervTimer) {
	o.Hyperv = &v
}

// GetKvm returns the Kvm field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Timer) GetKvm() KubevirtIoApiCoreV1KVMTimer {
	if o == nil || IsNil(o.Kvm) {
		var ret KubevirtIoApiCoreV1KVMTimer
		return ret
	}
	return *o.Kvm
}

// GetKvmOk returns a tuple with the Kvm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Timer) GetKvmOk() (*KubevirtIoApiCoreV1KVMTimer, bool) {
	if o == nil || IsNil(o.Kvm) {
		return nil, false
	}
	return o.Kvm, true
}

// HasKvm returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Timer) HasKvm() bool {
	if o != nil && !IsNil(o.Kvm) {
		return true
	}

	return false
}

// SetKvm gets a reference to the given KubevirtIoApiCoreV1KVMTimer and assigns it to the Kvm field.
func (o *KubevirtIoApiCoreV1Timer) SetKvm(v KubevirtIoApiCoreV1KVMTimer) {
	o.Kvm = &v
}

// GetPit returns the Pit field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Timer) GetPit() KubevirtIoApiCoreV1PITTimer {
	if o == nil || IsNil(o.Pit) {
		var ret KubevirtIoApiCoreV1PITTimer
		return ret
	}
	return *o.Pit
}

// GetPitOk returns a tuple with the Pit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Timer) GetPitOk() (*KubevirtIoApiCoreV1PITTimer, bool) {
	if o == nil || IsNil(o.Pit) {
		return nil, false
	}
	return o.Pit, true
}

// HasPit returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Timer) HasPit() bool {
	if o != nil && !IsNil(o.Pit) {
		return true
	}

	return false
}

// SetPit gets a reference to the given KubevirtIoApiCoreV1PITTimer and assigns it to the Pit field.
func (o *KubevirtIoApiCoreV1Timer) SetPit(v KubevirtIoApiCoreV1PITTimer) {
	o.Pit = &v
}

// GetRtc returns the Rtc field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Timer) GetRtc() KubevirtIoApiCoreV1RTCTimer {
	if o == nil || IsNil(o.Rtc) {
		var ret KubevirtIoApiCoreV1RTCTimer
		return ret
	}
	return *o.Rtc
}

// GetRtcOk returns a tuple with the Rtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Timer) GetRtcOk() (*KubevirtIoApiCoreV1RTCTimer, bool) {
	if o == nil || IsNil(o.Rtc) {
		return nil, false
	}
	return o.Rtc, true
}

// HasRtc returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Timer) HasRtc() bool {
	if o != nil && !IsNil(o.Rtc) {
		return true
	}

	return false
}

// SetRtc gets a reference to the given KubevirtIoApiCoreV1RTCTimer and assigns it to the Rtc field.
func (o *KubevirtIoApiCoreV1Timer) SetRtc(v KubevirtIoApiCoreV1RTCTimer) {
	o.Rtc = &v
}

func (o KubevirtIoApiCoreV1Timer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubevirtIoApiCoreV1Timer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hpet) {
		toSerialize["hpet"] = o.Hpet
	}
	if !IsNil(o.Hyperv) {
		toSerialize["hyperv"] = o.Hyperv
	}
	if !IsNil(o.Kvm) {
		toSerialize["kvm"] = o.Kvm
	}
	if !IsNil(o.Pit) {
		toSerialize["pit"] = o.Pit
	}
	if !IsNil(o.Rtc) {
		toSerialize["rtc"] = o.Rtc
	}
	return toSerialize, nil
}

type NullableKubevirtIoApiCoreV1Timer struct {
	value *KubevirtIoApiCoreV1Timer
	isSet bool
}

func (v NullableKubevirtIoApiCoreV1Timer) Get() *KubevirtIoApiCoreV1Timer {
	return v.value
}

func (v *NullableKubevirtIoApiCoreV1Timer) Set(val *KubevirtIoApiCoreV1Timer) {
	v.value = val
	v.isSet = true
}

func (v NullableKubevirtIoApiCoreV1Timer) IsSet() bool {
	return v.isSet
}

func (v *NullableKubevirtIoApiCoreV1Timer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubevirtIoApiCoreV1Timer(val *KubevirtIoApiCoreV1Timer) *NullableKubevirtIoApiCoreV1Timer {
	return &NullableKubevirtIoApiCoreV1Timer{value: val, isSet: true}
}

func (v NullableKubevirtIoApiCoreV1Timer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubevirtIoApiCoreV1Timer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


