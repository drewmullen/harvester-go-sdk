/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MigrationsAPIService MigrationsAPI service
type MigrationsAPIService service

type ApiCreateNamespacedVirtualMachineInstanceMigrationRequest struct {
	ctx context.Context
	ApiService *MigrationsAPIService
	namespace string
	body *KubevirtIoApiCoreV1VirtualMachineInstanceMigration
}

func (r ApiCreateNamespacedVirtualMachineInstanceMigrationRequest) Body(body KubevirtIoApiCoreV1VirtualMachineInstanceMigration) ApiCreateNamespacedVirtualMachineInstanceMigrationRequest {
	r.body = &body
	return r
}

func (r ApiCreateNamespacedVirtualMachineInstanceMigrationRequest) Execute() (*KubevirtIoApiCoreV1VirtualMachineInstanceMigration, *http.Response, error) {
	return r.ApiService.CreateNamespacedVirtualMachineInstanceMigrationExecute(r)
}

/*
CreateNamespacedVirtualMachineInstanceMigration Create a Virtual Machine Instance Migration

Create a VirtualMachineInstanceMigration object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiCreateNamespacedVirtualMachineInstanceMigrationRequest
*/
func (a *MigrationsAPIService) CreateNamespacedVirtualMachineInstanceMigration(ctx context.Context, namespace string) ApiCreateNamespacedVirtualMachineInstanceMigrationRequest {
	return ApiCreateNamespacedVirtualMachineInstanceMigrationRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return KubevirtIoApiCoreV1VirtualMachineInstanceMigration
func (a *MigrationsAPIService) CreateNamespacedVirtualMachineInstanceMigrationExecute(r ApiCreateNamespacedVirtualMachineInstanceMigrationRequest) (*KubevirtIoApiCoreV1VirtualMachineInstanceMigration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KubevirtIoApiCoreV1VirtualMachineInstanceMigration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationsAPIService.CreateNamespacedVirtualMachineInstanceMigration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancemigrations"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest struct {
	ctx context.Context
	ApiService *MigrationsAPIService
	name string
	namespace string
	body *K8sIoV1DeleteOptions
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
}

func (r ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest) Body(body K8sIoV1DeleteOptions) ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest {
	r.body = &body
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest) OrphanDependents(orphanDependents bool) ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest) PropagationPolicy(propagationPolicy string) ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest) Execute() (*K8sIoV1Status, *http.Response, error) {
	return r.ApiService.DeleteNamespacedVirtualMachineInstanceMigrationExecute(r)
}

/*
DeleteNamespacedVirtualMachineInstanceMigration Delete a Virtual Machine Instance Migration

Delete a VirtualMachineInstanceMigration object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest
*/
func (a *MigrationsAPIService) DeleteNamespacedVirtualMachineInstanceMigration(ctx context.Context, name string, namespace string) ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest {
	return ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return K8sIoV1Status
func (a *MigrationsAPIService) DeleteNamespacedVirtualMachineInstanceMigrationExecute(r ApiDeleteNamespacedVirtualMachineInstanceMigrationRequest) (*K8sIoV1Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *K8sIoV1Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationsAPIService.DeleteNamespacedVirtualMachineInstanceMigration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancemigrations/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNamespacedVirtualMachineInstanceMigrationRequest struct {
	ctx context.Context
	ApiService *MigrationsAPIService
	namespace string
	continue_ *string
	fieldSelector *string
	includeUninitialized *bool
	labelSelector *string
	limit *int32
	resourceVersion *string
	timeoutSeconds *int32
	watch *bool
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListNamespacedVirtualMachineInstanceMigrationRequest) Continue_(continue_ string) ApiListNamespacedVirtualMachineInstanceMigrationRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListNamespacedVirtualMachineInstanceMigrationRequest) FieldSelector(fieldSelector string) ApiListNamespacedVirtualMachineInstanceMigrationRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// If true, partially initialized resources are included in the response.
func (r ApiListNamespacedVirtualMachineInstanceMigrationRequest) IncludeUninitialized(includeUninitialized bool) ApiListNamespacedVirtualMachineInstanceMigrationRequest {
	r.includeUninitialized = &includeUninitialized
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything
func (r ApiListNamespacedVirtualMachineInstanceMigrationRequest) LabelSelector(labelSelector string) ApiListNamespacedVirtualMachineInstanceMigrationRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListNamespacedVirtualMachineInstanceMigrationRequest) Limit(limit int32) ApiListNamespacedVirtualMachineInstanceMigrationRequest {
	r.limit = &limit
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
func (r ApiListNamespacedVirtualMachineInstanceMigrationRequest) ResourceVersion(resourceVersion string) ApiListNamespacedVirtualMachineInstanceMigrationRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// TimeoutSeconds for the list/watch call.
func (r ApiListNamespacedVirtualMachineInstanceMigrationRequest) TimeoutSeconds(timeoutSeconds int32) ApiListNamespacedVirtualMachineInstanceMigrationRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListNamespacedVirtualMachineInstanceMigrationRequest) Watch(watch bool) ApiListNamespacedVirtualMachineInstanceMigrationRequest {
	r.watch = &watch
	return r
}

func (r ApiListNamespacedVirtualMachineInstanceMigrationRequest) Execute() (*KubevirtIoApiCoreV1VirtualMachineInstanceMigrationList, *http.Response, error) {
	return r.ApiService.ListNamespacedVirtualMachineInstanceMigrationExecute(r)
}

/*
ListNamespacedVirtualMachineInstanceMigration List Virtual Machine Instance Migrations

Get a list of VirtualMachineInstanceMigration objects in a namespace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiListNamespacedVirtualMachineInstanceMigrationRequest
*/
func (a *MigrationsAPIService) ListNamespacedVirtualMachineInstanceMigration(ctx context.Context, namespace string) ApiListNamespacedVirtualMachineInstanceMigrationRequest {
	return ApiListNamespacedVirtualMachineInstanceMigrationRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return KubevirtIoApiCoreV1VirtualMachineInstanceMigrationList
func (a *MigrationsAPIService) ListNamespacedVirtualMachineInstanceMigrationExecute(r ApiListNamespacedVirtualMachineInstanceMigrationRequest) (*KubevirtIoApiCoreV1VirtualMachineInstanceMigrationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KubevirtIoApiCoreV1VirtualMachineInstanceMigrationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationsAPIService.ListNamespacedVirtualMachineInstanceMigration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancemigrations"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.includeUninitialized != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeUninitialized", r.includeUninitialized, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/json;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *MigrationsAPIService
	continue_ *string
	fieldSelector *string
	includeUninitialized *bool
	labelSelector *string
	limit *int32
	resourceVersion *string
	timeoutSeconds *int32
	watch *bool
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest) Continue_(continue_ string) ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// If true, partially initialized resources are included in the response.
func (r ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest) IncludeUninitialized(includeUninitialized bool) ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest {
	r.includeUninitialized = &includeUninitialized
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything
func (r ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest) LabelSelector(labelSelector string) ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest) Limit(limit int32) ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
func (r ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// TimeoutSeconds for the list/watch call.
func (r ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest) Watch(watch bool) ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest) Execute() (*KubevirtIoApiCoreV1VirtualMachineInstanceMigrationList, *http.Response, error) {
	return r.ApiService.ListVirtualMachineInstanceMigrationForAllNamespacesExecute(r)
}

/*
ListVirtualMachineInstanceMigrationForAllNamespaces List Virtual Machine Instance Migrations For All Namespaces

Get a list of all VirtualMachineInstanceMigration objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest
*/
func (a *MigrationsAPIService) ListVirtualMachineInstanceMigrationForAllNamespaces(ctx context.Context) ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest {
	return ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KubevirtIoApiCoreV1VirtualMachineInstanceMigrationList
func (a *MigrationsAPIService) ListVirtualMachineInstanceMigrationForAllNamespacesExecute(r ApiListVirtualMachineInstanceMigrationForAllNamespacesRequest) (*KubevirtIoApiCoreV1VirtualMachineInstanceMigrationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KubevirtIoApiCoreV1VirtualMachineInstanceMigrationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationsAPIService.ListVirtualMachineInstanceMigrationForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/kubevirt.io/v1/virtualmachineinstancemigrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.includeUninitialized != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeUninitialized", r.includeUninitialized, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/json;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchNamespacedVirtualMachineInstanceMigrationRequest struct {
	ctx context.Context
	ApiService *MigrationsAPIService
	name string
	namespace string
	body *map[string]interface{}
}

func (r ApiPatchNamespacedVirtualMachineInstanceMigrationRequest) Body(body map[string]interface{}) ApiPatchNamespacedVirtualMachineInstanceMigrationRequest {
	r.body = &body
	return r
}

func (r ApiPatchNamespacedVirtualMachineInstanceMigrationRequest) Execute() (*KubevirtIoApiCoreV1VirtualMachineInstanceMigration, *http.Response, error) {
	return r.ApiService.PatchNamespacedVirtualMachineInstanceMigrationExecute(r)
}

/*
PatchNamespacedVirtualMachineInstanceMigration Patch a Virtual Machine Instance Migration

Patch a VirtualMachineInstanceMigration object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiPatchNamespacedVirtualMachineInstanceMigrationRequest
*/
func (a *MigrationsAPIService) PatchNamespacedVirtualMachineInstanceMigration(ctx context.Context, name string, namespace string) ApiPatchNamespacedVirtualMachineInstanceMigrationRequest {
	return ApiPatchNamespacedVirtualMachineInstanceMigrationRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return KubevirtIoApiCoreV1VirtualMachineInstanceMigration
func (a *MigrationsAPIService) PatchNamespacedVirtualMachineInstanceMigrationExecute(r ApiPatchNamespacedVirtualMachineInstanceMigrationRequest) (*KubevirtIoApiCoreV1VirtualMachineInstanceMigration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KubevirtIoApiCoreV1VirtualMachineInstanceMigration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationsAPIService.PatchNamespacedVirtualMachineInstanceMigration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancemigrations/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadNamespacedVirtualMachineInstanceMigrationRequest struct {
	ctx context.Context
	ApiService *MigrationsAPIService
	name string
	namespace string
	exact *bool
	export *bool
}

// Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
func (r ApiReadNamespacedVirtualMachineInstanceMigrationRequest) Exact(exact bool) ApiReadNamespacedVirtualMachineInstanceMigrationRequest {
	r.exact = &exact
	return r
}

// Should this value be exported. Export strips fields that a user can not specify.
func (r ApiReadNamespacedVirtualMachineInstanceMigrationRequest) Export(export bool) ApiReadNamespacedVirtualMachineInstanceMigrationRequest {
	r.export = &export
	return r
}

func (r ApiReadNamespacedVirtualMachineInstanceMigrationRequest) Execute() (*KubevirtIoApiCoreV1VirtualMachineInstanceMigration, *http.Response, error) {
	return r.ApiService.ReadNamespacedVirtualMachineInstanceMigrationExecute(r)
}

/*
ReadNamespacedVirtualMachineInstanceMigration Read a Virtual Machine Instance Migration

Get a VirtualMachineInstanceMigration object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiReadNamespacedVirtualMachineInstanceMigrationRequest
*/
func (a *MigrationsAPIService) ReadNamespacedVirtualMachineInstanceMigration(ctx context.Context, name string, namespace string) ApiReadNamespacedVirtualMachineInstanceMigrationRequest {
	return ApiReadNamespacedVirtualMachineInstanceMigrationRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return KubevirtIoApiCoreV1VirtualMachineInstanceMigration
func (a *MigrationsAPIService) ReadNamespacedVirtualMachineInstanceMigrationExecute(r ApiReadNamespacedVirtualMachineInstanceMigrationRequest) (*KubevirtIoApiCoreV1VirtualMachineInstanceMigration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KubevirtIoApiCoreV1VirtualMachineInstanceMigration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationsAPIService.ReadNamespacedVirtualMachineInstanceMigration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancemigrations/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.exact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exact", r.exact, "")
	}
	if r.export != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "export", r.export, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml", "application/json;stream=watch"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceNamespacedVirtualMachineInstanceMigrationRequest struct {
	ctx context.Context
	ApiService *MigrationsAPIService
	name string
	namespace string
	body *KubevirtIoApiCoreV1VirtualMachineInstanceMigration
}

func (r ApiReplaceNamespacedVirtualMachineInstanceMigrationRequest) Body(body KubevirtIoApiCoreV1VirtualMachineInstanceMigration) ApiReplaceNamespacedVirtualMachineInstanceMigrationRequest {
	r.body = &body
	return r
}

func (r ApiReplaceNamespacedVirtualMachineInstanceMigrationRequest) Execute() (*KubevirtIoApiCoreV1VirtualMachineInstanceMigration, *http.Response, error) {
	return r.ApiService.ReplaceNamespacedVirtualMachineInstanceMigrationExecute(r)
}

/*
ReplaceNamespacedVirtualMachineInstanceMigration Replace a Virtual Machine Instance Migration

Update a VirtualMachineInstanceMigration object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiReplaceNamespacedVirtualMachineInstanceMigrationRequest
*/
func (a *MigrationsAPIService) ReplaceNamespacedVirtualMachineInstanceMigration(ctx context.Context, name string, namespace string) ApiReplaceNamespacedVirtualMachineInstanceMigrationRequest {
	return ApiReplaceNamespacedVirtualMachineInstanceMigrationRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return KubevirtIoApiCoreV1VirtualMachineInstanceMigration
func (a *MigrationsAPIService) ReplaceNamespacedVirtualMachineInstanceMigrationExecute(r ApiReplaceNamespacedVirtualMachineInstanceMigrationRequest) (*KubevirtIoApiCoreV1VirtualMachineInstanceMigration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KubevirtIoApiCoreV1VirtualMachineInstanceMigration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MigrationsAPIService.ReplaceNamespacedVirtualMachineInstanceMigration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/kubevirt.io/v1/namespaces/{namespace}/virtualmachineinstancemigrations/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
