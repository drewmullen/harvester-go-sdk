/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the K8sIoV1NodeSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &K8sIoV1NodeSelector{}

// K8sIoV1NodeSelector struct for K8sIoV1NodeSelector
type K8sIoV1NodeSelector struct {
	NodeSelectorTerms []K8sIoV1NodeSelectorTerm `json:"nodeSelectorTerms"`
}

type _K8sIoV1NodeSelector K8sIoV1NodeSelector

// NewK8sIoV1NodeSelector instantiates a new K8sIoV1NodeSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewK8sIoV1NodeSelector(nodeSelectorTerms []K8sIoV1NodeSelectorTerm) *K8sIoV1NodeSelector {
	this := K8sIoV1NodeSelector{}
	this.NodeSelectorTerms = nodeSelectorTerms
	return &this
}

// NewK8sIoV1NodeSelectorWithDefaults instantiates a new K8sIoV1NodeSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewK8sIoV1NodeSelectorWithDefaults() *K8sIoV1NodeSelector {
	this := K8sIoV1NodeSelector{}
	return &this
}

// GetNodeSelectorTerms returns the NodeSelectorTerms field value
func (o *K8sIoV1NodeSelector) GetNodeSelectorTerms() []K8sIoV1NodeSelectorTerm {
	if o == nil {
		var ret []K8sIoV1NodeSelectorTerm
		return ret
	}

	return o.NodeSelectorTerms
}

// GetNodeSelectorTermsOk returns a tuple with the NodeSelectorTerms field value
// and a boolean to check if the value has been set.
func (o *K8sIoV1NodeSelector) GetNodeSelectorTermsOk() ([]K8sIoV1NodeSelectorTerm, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeSelectorTerms, true
}

// SetNodeSelectorTerms sets field value
func (o *K8sIoV1NodeSelector) SetNodeSelectorTerms(v []K8sIoV1NodeSelectorTerm) {
	o.NodeSelectorTerms = v
}

func (o K8sIoV1NodeSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o K8sIoV1NodeSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nodeSelectorTerms"] = o.NodeSelectorTerms
	return toSerialize, nil
}

func (o *K8sIoV1NodeSelector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodeSelectorTerms",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varK8sIoV1NodeSelector := _K8sIoV1NodeSelector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varK8sIoV1NodeSelector)

	if err != nil {
		return err
	}

	*o = K8sIoV1NodeSelector(varK8sIoV1NodeSelector)

	return err
}

type NullableK8sIoV1NodeSelector struct {
	value *K8sIoV1NodeSelector
	isSet bool
}

func (v NullableK8sIoV1NodeSelector) Get() *K8sIoV1NodeSelector {
	return v.value
}

func (v *NullableK8sIoV1NodeSelector) Set(val *K8sIoV1NodeSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableK8sIoV1NodeSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableK8sIoV1NodeSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableK8sIoV1NodeSelector(val *K8sIoV1NodeSelector) *NullableK8sIoV1NodeSelector {
	return &NullableK8sIoV1NodeSelector{value: val, isSet: true}
}

func (v NullableK8sIoV1NodeSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableK8sIoV1NodeSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


