/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NetworkHarvesterhciIoV1beta1NodeNetworkSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkHarvesterhciIoV1beta1NodeNetworkSpec{}

// NetworkHarvesterhciIoV1beta1NodeNetworkSpec struct for NetworkHarvesterhciIoV1beta1NodeNetworkSpec
type NetworkHarvesterhciIoV1beta1NodeNetworkSpec struct {
	Description *string `json:"description,omitempty"`
	Nic *string `json:"nic,omitempty"`
	NodeName string `json:"nodeName"`
	Type *string `json:"type,omitempty"`
}

type _NetworkHarvesterhciIoV1beta1NodeNetworkSpec NetworkHarvesterhciIoV1beta1NodeNetworkSpec

// NewNetworkHarvesterhciIoV1beta1NodeNetworkSpec instantiates a new NetworkHarvesterhciIoV1beta1NodeNetworkSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkHarvesterhciIoV1beta1NodeNetworkSpec(nodeName string) *NetworkHarvesterhciIoV1beta1NodeNetworkSpec {
	this := NetworkHarvesterhciIoV1beta1NodeNetworkSpec{}
	this.NodeName = nodeName
	return &this
}

// NewNetworkHarvesterhciIoV1beta1NodeNetworkSpecWithDefaults instantiates a new NetworkHarvesterhciIoV1beta1NodeNetworkSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkHarvesterhciIoV1beta1NodeNetworkSpecWithDefaults() *NetworkHarvesterhciIoV1beta1NodeNetworkSpec {
	this := NetworkHarvesterhciIoV1beta1NodeNetworkSpec{}
	var nodeName string = ""
	this.NodeName = nodeName
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) SetDescription(v string) {
	o.Description = &v
}

// GetNic returns the Nic field value if set, zero value otherwise.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) GetNic() string {
	if o == nil || IsNil(o.Nic) {
		var ret string
		return ret
	}
	return *o.Nic
}

// GetNicOk returns a tuple with the Nic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) GetNicOk() (*string, bool) {
	if o == nil || IsNil(o.Nic) {
		return nil, false
	}
	return o.Nic, true
}

// HasNic returns a boolean if a field has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) HasNic() bool {
	if o != nil && !IsNil(o.Nic) {
		return true
	}

	return false
}

// SetNic gets a reference to the given string and assigns it to the Nic field.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) SetNic(v string) {
	o.Nic = &v
}

// GetNodeName returns the NodeName field value
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) GetNodeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) GetNodeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeName, true
}

// SetNodeName sets field value
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) SetNodeName(v string) {
	o.NodeName = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) SetType(v string) {
	o.Type = &v
}

func (o NetworkHarvesterhciIoV1beta1NodeNetworkSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkHarvesterhciIoV1beta1NodeNetworkSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Nic) {
		toSerialize["nic"] = o.Nic
	}
	toSerialize["nodeName"] = o.NodeName
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodeName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkHarvesterhciIoV1beta1NodeNetworkSpec := _NetworkHarvesterhciIoV1beta1NodeNetworkSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetworkHarvesterhciIoV1beta1NodeNetworkSpec)

	if err != nil {
		return err
	}

	*o = NetworkHarvesterhciIoV1beta1NodeNetworkSpec(varNetworkHarvesterhciIoV1beta1NodeNetworkSpec)

	return err
}

type NullableNetworkHarvesterhciIoV1beta1NodeNetworkSpec struct {
	value *NetworkHarvesterhciIoV1beta1NodeNetworkSpec
	isSet bool
}

func (v NullableNetworkHarvesterhciIoV1beta1NodeNetworkSpec) Get() *NetworkHarvesterhciIoV1beta1NodeNetworkSpec {
	return v.value
}

func (v *NullableNetworkHarvesterhciIoV1beta1NodeNetworkSpec) Set(val *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkHarvesterhciIoV1beta1NodeNetworkSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkHarvesterhciIoV1beta1NodeNetworkSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkHarvesterhciIoV1beta1NodeNetworkSpec(val *NetworkHarvesterhciIoV1beta1NodeNetworkSpec) *NullableNetworkHarvesterhciIoV1beta1NodeNetworkSpec {
	return &NullableNetworkHarvesterhciIoV1beta1NodeNetworkSpec{value: val, isSet: true}
}

func (v NullableNetworkHarvesterhciIoV1beta1NodeNetworkSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkHarvesterhciIoV1beta1NodeNetworkSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


