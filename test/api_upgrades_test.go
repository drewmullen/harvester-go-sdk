/*
Harvester APIs

Testing UpgradesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/drewmullen/harvester-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_UpgradesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UpgradesAPIService CreateNamespacedUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.UpgradesAPI.CreateNamespacedUpgrade(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UpgradesAPIService DeleteNamespacedUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.UpgradesAPI.DeleteNamespacedUpgrade(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UpgradesAPIService ListNamespacedUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.UpgradesAPI.ListNamespacedUpgrade(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UpgradesAPIService ListUpgradeForAllNamespaces", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UpgradesAPI.ListUpgradeForAllNamespaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UpgradesAPIService PatchNamespacedUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.UpgradesAPI.PatchNamespacedUpgrade(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UpgradesAPIService ReadNamespacedUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.UpgradesAPI.ReadNamespacedUpgrade(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UpgradesAPIService ReplaceNamespacedUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.UpgradesAPI.ReplaceNamespacedUpgrade(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
