/*
Harvester APIs

Testing MigrationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package harvester

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/drewmullen/harvester-go-sdk"
)

func Test_harvester_MigrationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MigrationsAPIService CreateNamespacedVirtualMachineInstanceMigration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.MigrationsAPI.CreateNamespacedVirtualMachineInstanceMigration(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MigrationsAPIService DeleteNamespacedVirtualMachineInstanceMigration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.MigrationsAPI.DeleteNamespacedVirtualMachineInstanceMigration(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MigrationsAPIService ListNamespacedVirtualMachineInstanceMigration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.MigrationsAPI.ListNamespacedVirtualMachineInstanceMigration(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MigrationsAPIService ListVirtualMachineInstanceMigrationForAllNamespaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MigrationsAPI.ListVirtualMachineInstanceMigrationForAllNamespaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MigrationsAPIService PatchNamespacedVirtualMachineInstanceMigration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.MigrationsAPI.PatchNamespacedVirtualMachineInstanceMigration(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MigrationsAPIService ReadNamespacedVirtualMachineInstanceMigration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.MigrationsAPI.ReadNamespacedVirtualMachineInstanceMigration(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MigrationsAPIService ReplaceNamespacedVirtualMachineInstanceMigration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.MigrationsAPI.ReplaceNamespacedVirtualMachineInstanceMigration(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
