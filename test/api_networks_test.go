/*
Harvester APIs

Testing NetworksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/drewmullen/harvester-go-sdk"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_NetworksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NetworksAPIService CreateNamespacedClusterNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.CreateNamespacedClusterNetwork(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService CreateNamespacedNetworkAttachmentDefinition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.CreateNamespacedNetworkAttachmentDefinition(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService CreateNamespacedNodeNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.CreateNamespacedNodeNetwork(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService DeleteNamespacedClusterNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.DeleteNamespacedClusterNetwork(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService DeleteNamespacedNetworkAttachmentDefinition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.DeleteNamespacedNetworkAttachmentDefinition(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService DeleteNamespacedNodeNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.DeleteNamespacedNodeNetwork(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService ListNamespacedClusterNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.ListNamespacedClusterNetwork(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService ListNamespacedNetworkAttachmentDefinition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.ListNamespacedNetworkAttachmentDefinition(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService ListNamespacedNodeNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.ListNamespacedNodeNetwork(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService ListNetworkAttachmentDefinitionForAllNamespaces", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.NetworksAPI.ListNetworkAttachmentDefinitionForAllNamespaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService PatchNamespacedClusterNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.PatchNamespacedClusterNetwork(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService PatchNamespacedNetworkAttachmentDefinition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.PatchNamespacedNetworkAttachmentDefinition(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService PatchNamespacedNodeNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.PatchNamespacedNodeNetwork(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService ReadNamespacedClusterNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.ReadNamespacedClusterNetwork(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService ReadNamespacedNetworkAttachmentDefinition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.ReadNamespacedNetworkAttachmentDefinition(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService ReadNamespacedNodeNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.ReadNamespacedNodeNetwork(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService ReplaceNamespacedClusterNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.ReplaceNamespacedClusterNetwork(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService ReplaceNamespacedNetworkAttachmentDefinition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.ReplaceNamespacedNetworkAttachmentDefinition(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NetworksAPIService ReplaceNamespacedNodeNetwork", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string
		var namespace string

		resp, httpRes, err := apiClient.NetworksAPI.ReplaceNamespacedNodeNetwork(context.Background(), name, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
