/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
)

// checks if the KubevirtIoApiCoreV1VirtualMachineStartFailure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubevirtIoApiCoreV1VirtualMachineStartFailure{}

// KubevirtIoApiCoreV1VirtualMachineStartFailure VirtualMachineStartFailure tracks VMIs which failed to transition successfully to running using the VM status
type KubevirtIoApiCoreV1VirtualMachineStartFailure struct {
	ConsecutiveFailCount *int32 `json:"consecutiveFailCount,omitempty"`
	LastFailedVMIUID *string `json:"lastFailedVMIUID,omitempty"`
	// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
	RetryAfterTimestamp *string `json:"retryAfterTimestamp,omitempty"`
}

// NewKubevirtIoApiCoreV1VirtualMachineStartFailure instantiates a new KubevirtIoApiCoreV1VirtualMachineStartFailure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubevirtIoApiCoreV1VirtualMachineStartFailure() *KubevirtIoApiCoreV1VirtualMachineStartFailure {
	this := KubevirtIoApiCoreV1VirtualMachineStartFailure{}
	var retryAfterTimestamp string = ""
	this.RetryAfterTimestamp = &retryAfterTimestamp
	return &this
}

// NewKubevirtIoApiCoreV1VirtualMachineStartFailureWithDefaults instantiates a new KubevirtIoApiCoreV1VirtualMachineStartFailure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubevirtIoApiCoreV1VirtualMachineStartFailureWithDefaults() *KubevirtIoApiCoreV1VirtualMachineStartFailure {
	this := KubevirtIoApiCoreV1VirtualMachineStartFailure{}
	var retryAfterTimestamp string = ""
	this.RetryAfterTimestamp = &retryAfterTimestamp
	return &this
}

// GetConsecutiveFailCount returns the ConsecutiveFailCount field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1VirtualMachineStartFailure) GetConsecutiveFailCount() int32 {
	if o == nil || IsNil(o.ConsecutiveFailCount) {
		var ret int32
		return ret
	}
	return *o.ConsecutiveFailCount
}

// GetConsecutiveFailCountOk returns a tuple with the ConsecutiveFailCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1VirtualMachineStartFailure) GetConsecutiveFailCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ConsecutiveFailCount) {
		return nil, false
	}
	return o.ConsecutiveFailCount, true
}

// HasConsecutiveFailCount returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1VirtualMachineStartFailure) HasConsecutiveFailCount() bool {
	if o != nil && !IsNil(o.ConsecutiveFailCount) {
		return true
	}

	return false
}

// SetConsecutiveFailCount gets a reference to the given int32 and assigns it to the ConsecutiveFailCount field.
func (o *KubevirtIoApiCoreV1VirtualMachineStartFailure) SetConsecutiveFailCount(v int32) {
	o.ConsecutiveFailCount = &v
}

// GetLastFailedVMIUID returns the LastFailedVMIUID field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1VirtualMachineStartFailure) GetLastFailedVMIUID() string {
	if o == nil || IsNil(o.LastFailedVMIUID) {
		var ret string
		return ret
	}
	return *o.LastFailedVMIUID
}

// GetLastFailedVMIUIDOk returns a tuple with the LastFailedVMIUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1VirtualMachineStartFailure) GetLastFailedVMIUIDOk() (*string, bool) {
	if o == nil || IsNil(o.LastFailedVMIUID) {
		return nil, false
	}
	return o.LastFailedVMIUID, true
}

// HasLastFailedVMIUID returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1VirtualMachineStartFailure) HasLastFailedVMIUID() bool {
	if o != nil && !IsNil(o.LastFailedVMIUID) {
		return true
	}

	return false
}

// SetLastFailedVMIUID gets a reference to the given string and assigns it to the LastFailedVMIUID field.
func (o *KubevirtIoApiCoreV1VirtualMachineStartFailure) SetLastFailedVMIUID(v string) {
	o.LastFailedVMIUID = &v
}

// GetRetryAfterTimestamp returns the RetryAfterTimestamp field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1VirtualMachineStartFailure) GetRetryAfterTimestamp() string {
	if o == nil || IsNil(o.RetryAfterTimestamp) {
		var ret string
		return ret
	}
	return *o.RetryAfterTimestamp
}

// GetRetryAfterTimestampOk returns a tuple with the RetryAfterTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1VirtualMachineStartFailure) GetRetryAfterTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.RetryAfterTimestamp) {
		return nil, false
	}
	return o.RetryAfterTimestamp, true
}

// HasRetryAfterTimestamp returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1VirtualMachineStartFailure) HasRetryAfterTimestamp() bool {
	if o != nil && !IsNil(o.RetryAfterTimestamp) {
		return true
	}

	return false
}

// SetRetryAfterTimestamp gets a reference to the given string and assigns it to the RetryAfterTimestamp field.
func (o *KubevirtIoApiCoreV1VirtualMachineStartFailure) SetRetryAfterTimestamp(v string) {
	o.RetryAfterTimestamp = &v
}

func (o KubevirtIoApiCoreV1VirtualMachineStartFailure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubevirtIoApiCoreV1VirtualMachineStartFailure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsecutiveFailCount) {
		toSerialize["consecutiveFailCount"] = o.ConsecutiveFailCount
	}
	if !IsNil(o.LastFailedVMIUID) {
		toSerialize["lastFailedVMIUID"] = o.LastFailedVMIUID
	}
	if !IsNil(o.RetryAfterTimestamp) {
		toSerialize["retryAfterTimestamp"] = o.RetryAfterTimestamp
	}
	return toSerialize, nil
}

type NullableKubevirtIoApiCoreV1VirtualMachineStartFailure struct {
	value *KubevirtIoApiCoreV1VirtualMachineStartFailure
	isSet bool
}

func (v NullableKubevirtIoApiCoreV1VirtualMachineStartFailure) Get() *KubevirtIoApiCoreV1VirtualMachineStartFailure {
	return v.value
}

func (v *NullableKubevirtIoApiCoreV1VirtualMachineStartFailure) Set(val *KubevirtIoApiCoreV1VirtualMachineStartFailure) {
	v.value = val
	v.isSet = true
}

func (v NullableKubevirtIoApiCoreV1VirtualMachineStartFailure) IsSet() bool {
	return v.isSet
}

func (v *NullableKubevirtIoApiCoreV1VirtualMachineStartFailure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubevirtIoApiCoreV1VirtualMachineStartFailure(val *KubevirtIoApiCoreV1VirtualMachineStartFailure) *NullableKubevirtIoApiCoreV1VirtualMachineStartFailure {
	return &NullableKubevirtIoApiCoreV1VirtualMachineStartFailure{value: val, isSet: true}
}

func (v NullableKubevirtIoApiCoreV1VirtualMachineStartFailure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubevirtIoApiCoreV1VirtualMachineStartFailure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


