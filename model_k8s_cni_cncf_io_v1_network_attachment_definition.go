/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the K8sCniCncfIoV1NetworkAttachmentDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &K8sCniCncfIoV1NetworkAttachmentDefinition{}

// K8sCniCncfIoV1NetworkAttachmentDefinition struct for K8sCniCncfIoV1NetworkAttachmentDefinition
type K8sCniCncfIoV1NetworkAttachmentDefinition struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	Metadata *K8sIoV1ObjectMeta `json:"metadata,omitempty"`
	Spec K8sCniCncfIoV1NetworkAttachmentDefinitionSpec `json:"spec"`
}

type _K8sCniCncfIoV1NetworkAttachmentDefinition K8sCniCncfIoV1NetworkAttachmentDefinition

// NewK8sCniCncfIoV1NetworkAttachmentDefinition instantiates a new K8sCniCncfIoV1NetworkAttachmentDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewK8sCniCncfIoV1NetworkAttachmentDefinition(spec K8sCniCncfIoV1NetworkAttachmentDefinitionSpec) *K8sCniCncfIoV1NetworkAttachmentDefinition {
	this := K8sCniCncfIoV1NetworkAttachmentDefinition{}
	var metadata K8sIoV1ObjectMeta
	this.Metadata = &metadata
	this.Spec = spec
	return &this
}

// NewK8sCniCncfIoV1NetworkAttachmentDefinitionWithDefaults instantiates a new K8sCniCncfIoV1NetworkAttachmentDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewK8sCniCncfIoV1NetworkAttachmentDefinitionWithDefaults() *K8sCniCncfIoV1NetworkAttachmentDefinition {
	this := K8sCniCncfIoV1NetworkAttachmentDefinition{}
	var metadata K8sIoV1ObjectMeta
	this.Metadata = &metadata
	var spec K8sCniCncfIoV1NetworkAttachmentDefinitionSpec
	this.Spec = spec
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) SetKind(v string) {
	o.Kind = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) GetMetadata() K8sIoV1ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret K8sIoV1ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) GetMetadataOk() (*K8sIoV1ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given K8sIoV1ObjectMeta and assigns it to the Metadata field.
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) SetMetadata(v K8sIoV1ObjectMeta) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) GetSpec() K8sCniCncfIoV1NetworkAttachmentDefinitionSpec {
	if o == nil {
		var ret K8sCniCncfIoV1NetworkAttachmentDefinitionSpec
		return ret
	}

	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value
// and a boolean to check if the value has been set.
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) GetSpecOk() (*K8sCniCncfIoV1NetworkAttachmentDefinitionSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spec, true
}

// SetSpec sets field value
func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) SetSpec(v K8sCniCncfIoV1NetworkAttachmentDefinitionSpec) {
	o.Spec = v
}

func (o K8sCniCncfIoV1NetworkAttachmentDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o K8sCniCncfIoV1NetworkAttachmentDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["spec"] = o.Spec
	return toSerialize, nil
}

func (o *K8sCniCncfIoV1NetworkAttachmentDefinition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"spec",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varK8sCniCncfIoV1NetworkAttachmentDefinition := _K8sCniCncfIoV1NetworkAttachmentDefinition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varK8sCniCncfIoV1NetworkAttachmentDefinition)

	if err != nil {
		return err
	}

	*o = K8sCniCncfIoV1NetworkAttachmentDefinition(varK8sCniCncfIoV1NetworkAttachmentDefinition)

	return err
}

type NullableK8sCniCncfIoV1NetworkAttachmentDefinition struct {
	value *K8sCniCncfIoV1NetworkAttachmentDefinition
	isSet bool
}

func (v NullableK8sCniCncfIoV1NetworkAttachmentDefinition) Get() *K8sCniCncfIoV1NetworkAttachmentDefinition {
	return v.value
}

func (v *NullableK8sCniCncfIoV1NetworkAttachmentDefinition) Set(val *K8sCniCncfIoV1NetworkAttachmentDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableK8sCniCncfIoV1NetworkAttachmentDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableK8sCniCncfIoV1NetworkAttachmentDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableK8sCniCncfIoV1NetworkAttachmentDefinition(val *K8sCniCncfIoV1NetworkAttachmentDefinition) *NullableK8sCniCncfIoV1NetworkAttachmentDefinition {
	return &NullableK8sCniCncfIoV1NetworkAttachmentDefinition{value: val, isSet: true}
}

func (v NullableK8sCniCncfIoV1NetworkAttachmentDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableK8sCniCncfIoV1NetworkAttachmentDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


