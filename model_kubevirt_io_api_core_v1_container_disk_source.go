/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KubevirtIoApiCoreV1ContainerDiskSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubevirtIoApiCoreV1ContainerDiskSource{}

// KubevirtIoApiCoreV1ContainerDiskSource struct for KubevirtIoApiCoreV1ContainerDiskSource
type KubevirtIoApiCoreV1ContainerDiskSource struct {
	Image string `json:"image"`
	ImagePullPolicy *string `json:"imagePullPolicy,omitempty"`
	ImagePullSecret *string `json:"imagePullSecret,omitempty"`
	Path *string `json:"path,omitempty"`
}

type _KubevirtIoApiCoreV1ContainerDiskSource KubevirtIoApiCoreV1ContainerDiskSource

// NewKubevirtIoApiCoreV1ContainerDiskSource instantiates a new KubevirtIoApiCoreV1ContainerDiskSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubevirtIoApiCoreV1ContainerDiskSource(image string) *KubevirtIoApiCoreV1ContainerDiskSource {
	this := KubevirtIoApiCoreV1ContainerDiskSource{}
	this.Image = image
	return &this
}

// NewKubevirtIoApiCoreV1ContainerDiskSourceWithDefaults instantiates a new KubevirtIoApiCoreV1ContainerDiskSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubevirtIoApiCoreV1ContainerDiskSourceWithDefaults() *KubevirtIoApiCoreV1ContainerDiskSource {
	this := KubevirtIoApiCoreV1ContainerDiskSource{}
	var image string = ""
	this.Image = image
	return &this
}

// GetImage returns the Image field value
func (o *KubevirtIoApiCoreV1ContainerDiskSource) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1ContainerDiskSource) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *KubevirtIoApiCoreV1ContainerDiskSource) SetImage(v string) {
	o.Image = v
}

// GetImagePullPolicy returns the ImagePullPolicy field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1ContainerDiskSource) GetImagePullPolicy() string {
	if o == nil || IsNil(o.ImagePullPolicy) {
		var ret string
		return ret
	}
	return *o.ImagePullPolicy
}

// GetImagePullPolicyOk returns a tuple with the ImagePullPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1ContainerDiskSource) GetImagePullPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ImagePullPolicy) {
		return nil, false
	}
	return o.ImagePullPolicy, true
}

// HasImagePullPolicy returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1ContainerDiskSource) HasImagePullPolicy() bool {
	if o != nil && !IsNil(o.ImagePullPolicy) {
		return true
	}

	return false
}

// SetImagePullPolicy gets a reference to the given string and assigns it to the ImagePullPolicy field.
func (o *KubevirtIoApiCoreV1ContainerDiskSource) SetImagePullPolicy(v string) {
	o.ImagePullPolicy = &v
}

// GetImagePullSecret returns the ImagePullSecret field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1ContainerDiskSource) GetImagePullSecret() string {
	if o == nil || IsNil(o.ImagePullSecret) {
		var ret string
		return ret
	}
	return *o.ImagePullSecret
}

// GetImagePullSecretOk returns a tuple with the ImagePullSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1ContainerDiskSource) GetImagePullSecretOk() (*string, bool) {
	if o == nil || IsNil(o.ImagePullSecret) {
		return nil, false
	}
	return o.ImagePullSecret, true
}

// HasImagePullSecret returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1ContainerDiskSource) HasImagePullSecret() bool {
	if o != nil && !IsNil(o.ImagePullSecret) {
		return true
	}

	return false
}

// SetImagePullSecret gets a reference to the given string and assigns it to the ImagePullSecret field.
func (o *KubevirtIoApiCoreV1ContainerDiskSource) SetImagePullSecret(v string) {
	o.ImagePullSecret = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1ContainerDiskSource) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1ContainerDiskSource) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1ContainerDiskSource) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *KubevirtIoApiCoreV1ContainerDiskSource) SetPath(v string) {
	o.Path = &v
}

func (o KubevirtIoApiCoreV1ContainerDiskSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubevirtIoApiCoreV1ContainerDiskSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image"] = o.Image
	if !IsNil(o.ImagePullPolicy) {
		toSerialize["imagePullPolicy"] = o.ImagePullPolicy
	}
	if !IsNil(o.ImagePullSecret) {
		toSerialize["imagePullSecret"] = o.ImagePullSecret
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

func (o *KubevirtIoApiCoreV1ContainerDiskSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubevirtIoApiCoreV1ContainerDiskSource := _KubevirtIoApiCoreV1ContainerDiskSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKubevirtIoApiCoreV1ContainerDiskSource)

	if err != nil {
		return err
	}

	*o = KubevirtIoApiCoreV1ContainerDiskSource(varKubevirtIoApiCoreV1ContainerDiskSource)

	return err
}

type NullableKubevirtIoApiCoreV1ContainerDiskSource struct {
	value *KubevirtIoApiCoreV1ContainerDiskSource
	isSet bool
}

func (v NullableKubevirtIoApiCoreV1ContainerDiskSource) Get() *KubevirtIoApiCoreV1ContainerDiskSource {
	return v.value
}

func (v *NullableKubevirtIoApiCoreV1ContainerDiskSource) Set(val *KubevirtIoApiCoreV1ContainerDiskSource) {
	v.value = val
	v.isSet = true
}

func (v NullableKubevirtIoApiCoreV1ContainerDiskSource) IsSet() bool {
	return v.isSet
}

func (v *NullableKubevirtIoApiCoreV1ContainerDiskSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubevirtIoApiCoreV1ContainerDiskSource(val *KubevirtIoApiCoreV1ContainerDiskSource) *NullableKubevirtIoApiCoreV1ContainerDiskSource {
	return &NullableKubevirtIoApiCoreV1ContainerDiskSource{value: val, isSet: true}
}

func (v NullableKubevirtIoApiCoreV1ContainerDiskSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubevirtIoApiCoreV1ContainerDiskSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


