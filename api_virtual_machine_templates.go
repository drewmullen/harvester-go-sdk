/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// VirtualMachineTemplatesAPIService VirtualMachineTemplatesAPI service
type VirtualMachineTemplatesAPIService service

type ApiCreateNamespacedVirtualMachineTemplateRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	namespace string
	harvesterhciIoV1beta1VirtualMachineTemplate *HarvesterhciIoV1beta1VirtualMachineTemplate
}

func (r ApiCreateNamespacedVirtualMachineTemplateRequest) HarvesterhciIoV1beta1VirtualMachineTemplate(harvesterhciIoV1beta1VirtualMachineTemplate HarvesterhciIoV1beta1VirtualMachineTemplate) ApiCreateNamespacedVirtualMachineTemplateRequest {
	r.harvesterhciIoV1beta1VirtualMachineTemplate = &harvesterhciIoV1beta1VirtualMachineTemplate
	return r
}

func (r ApiCreateNamespacedVirtualMachineTemplateRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplate, *http.Response, error) {
	return r.ApiService.CreateNamespacedVirtualMachineTemplateExecute(r)
}

/*
CreateNamespacedVirtualMachineTemplate Create a Namespaced Virtual Machine Template

Create a VirtualMachineTemplate object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiCreateNamespacedVirtualMachineTemplateRequest
*/
func (a *VirtualMachineTemplatesAPIService) CreateNamespacedVirtualMachineTemplate(ctx context.Context, namespace string) ApiCreateNamespacedVirtualMachineTemplateRequest {
	return ApiCreateNamespacedVirtualMachineTemplateRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplate
func (a *VirtualMachineTemplatesAPIService) CreateNamespacedVirtualMachineTemplateExecute(r ApiCreateNamespacedVirtualMachineTemplateRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.CreateNamespacedVirtualMachineTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/namespaces/{namespace}/virtualmachinetemplates"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.harvesterhciIoV1beta1VirtualMachineTemplate == nil {
		return localVarReturnValue, nil, reportError("harvesterhciIoV1beta1VirtualMachineTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.harvesterhciIoV1beta1VirtualMachineTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateNamespacedVirtualMachineTemplateVersionRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	namespace string
	harvesterhciIoV1beta1VirtualMachineTemplateVersion *HarvesterhciIoV1beta1VirtualMachineTemplateVersion
}

func (r ApiCreateNamespacedVirtualMachineTemplateVersionRequest) HarvesterhciIoV1beta1VirtualMachineTemplateVersion(harvesterhciIoV1beta1VirtualMachineTemplateVersion HarvesterhciIoV1beta1VirtualMachineTemplateVersion) ApiCreateNamespacedVirtualMachineTemplateVersionRequest {
	r.harvesterhciIoV1beta1VirtualMachineTemplateVersion = &harvesterhciIoV1beta1VirtualMachineTemplateVersion
	return r
}

func (r ApiCreateNamespacedVirtualMachineTemplateVersionRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplateVersion, *http.Response, error) {
	return r.ApiService.CreateNamespacedVirtualMachineTemplateVersionExecute(r)
}

/*
CreateNamespacedVirtualMachineTemplateVersion Create a Namespaced Virtual Machine Template Version

Create a VirtualMachineTemplateVersion object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiCreateNamespacedVirtualMachineTemplateVersionRequest
*/
func (a *VirtualMachineTemplatesAPIService) CreateNamespacedVirtualMachineTemplateVersion(ctx context.Context, namespace string) ApiCreateNamespacedVirtualMachineTemplateVersionRequest {
	return ApiCreateNamespacedVirtualMachineTemplateVersionRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplateVersion
func (a *VirtualMachineTemplatesAPIService) CreateNamespacedVirtualMachineTemplateVersionExecute(r ApiCreateNamespacedVirtualMachineTemplateVersionRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplateVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplateVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.CreateNamespacedVirtualMachineTemplateVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/namespaces/{namespace}/virtualmachinetemplateversions"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.harvesterhciIoV1beta1VirtualMachineTemplateVersion == nil {
		return localVarReturnValue, nil, reportError("harvesterhciIoV1beta1VirtualMachineTemplateVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.harvesterhciIoV1beta1VirtualMachineTemplateVersion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNamespacedVirtualMachineTemplateRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	name string
	namespace string
	k8sIoV1DeleteOptions *K8sIoV1DeleteOptions
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
}

func (r ApiDeleteNamespacedVirtualMachineTemplateRequest) K8sIoV1DeleteOptions(k8sIoV1DeleteOptions K8sIoV1DeleteOptions) ApiDeleteNamespacedVirtualMachineTemplateRequest {
	r.k8sIoV1DeleteOptions = &k8sIoV1DeleteOptions
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteNamespacedVirtualMachineTemplateRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteNamespacedVirtualMachineTemplateRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteNamespacedVirtualMachineTemplateRequest) OrphanDependents(orphanDependents bool) ApiDeleteNamespacedVirtualMachineTemplateRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteNamespacedVirtualMachineTemplateRequest) PropagationPolicy(propagationPolicy string) ApiDeleteNamespacedVirtualMachineTemplateRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteNamespacedVirtualMachineTemplateRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplate, *http.Response, error) {
	return r.ApiService.DeleteNamespacedVirtualMachineTemplateExecute(r)
}

/*
DeleteNamespacedVirtualMachineTemplate Delete a Namespaced Virtual Machine Template

Delete a VirtualMachineTemplate object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiDeleteNamespacedVirtualMachineTemplateRequest
*/
func (a *VirtualMachineTemplatesAPIService) DeleteNamespacedVirtualMachineTemplate(ctx context.Context, name string, namespace string) ApiDeleteNamespacedVirtualMachineTemplateRequest {
	return ApiDeleteNamespacedVirtualMachineTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplate
func (a *VirtualMachineTemplatesAPIService) DeleteNamespacedVirtualMachineTemplateExecute(r ApiDeleteNamespacedVirtualMachineTemplateRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.DeleteNamespacedVirtualMachineTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/namespaces/{namespace}/virtualmachinetemplates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.k8sIoV1DeleteOptions == nil {
		return localVarReturnValue, nil, reportError("k8sIoV1DeleteOptions is required and must be specified")
	}

	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.k8sIoV1DeleteOptions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNamespacedVirtualMachineTemplateVersionRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	name string
	namespace string
	k8sIoV1DeleteOptions *K8sIoV1DeleteOptions
	gracePeriodSeconds *int32
	orphanDependents *bool
	propagationPolicy *string
}

func (r ApiDeleteNamespacedVirtualMachineTemplateVersionRequest) K8sIoV1DeleteOptions(k8sIoV1DeleteOptions K8sIoV1DeleteOptions) ApiDeleteNamespacedVirtualMachineTemplateVersionRequest {
	r.k8sIoV1DeleteOptions = &k8sIoV1DeleteOptions
	return r
}

// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
func (r ApiDeleteNamespacedVirtualMachineTemplateVersionRequest) GracePeriodSeconds(gracePeriodSeconds int32) ApiDeleteNamespacedVirtualMachineTemplateVersionRequest {
	r.gracePeriodSeconds = &gracePeriodSeconds
	return r
}

// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
func (r ApiDeleteNamespacedVirtualMachineTemplateVersionRequest) OrphanDependents(orphanDependents bool) ApiDeleteNamespacedVirtualMachineTemplateVersionRequest {
	r.orphanDependents = &orphanDependents
	return r
}

// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
func (r ApiDeleteNamespacedVirtualMachineTemplateVersionRequest) PropagationPolicy(propagationPolicy string) ApiDeleteNamespacedVirtualMachineTemplateVersionRequest {
	r.propagationPolicy = &propagationPolicy
	return r
}

func (r ApiDeleteNamespacedVirtualMachineTemplateVersionRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplateVersion, *http.Response, error) {
	return r.ApiService.DeleteNamespacedVirtualMachineTemplateVersionExecute(r)
}

/*
DeleteNamespacedVirtualMachineTemplateVersion Delete a Namespaced Virtual Machine Template Version

Delete a VirtualMachineTemplateVersion object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiDeleteNamespacedVirtualMachineTemplateVersionRequest
*/
func (a *VirtualMachineTemplatesAPIService) DeleteNamespacedVirtualMachineTemplateVersion(ctx context.Context, name string, namespace string) ApiDeleteNamespacedVirtualMachineTemplateVersionRequest {
	return ApiDeleteNamespacedVirtualMachineTemplateVersionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplateVersion
func (a *VirtualMachineTemplatesAPIService) DeleteNamespacedVirtualMachineTemplateVersionExecute(r ApiDeleteNamespacedVirtualMachineTemplateVersionRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplateVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplateVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.DeleteNamespacedVirtualMachineTemplateVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/namespaces/{namespace}/virtualmachinetemplateversions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.k8sIoV1DeleteOptions == nil {
		return localVarReturnValue, nil, reportError("k8sIoV1DeleteOptions is required and must be specified")
	}

	if r.gracePeriodSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "gracePeriodSeconds", r.gracePeriodSeconds, "")
	}
	if r.orphanDependents != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orphanDependents", r.orphanDependents, "")
	}
	if r.propagationPolicy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "propagationPolicy", r.propagationPolicy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.k8sIoV1DeleteOptions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNamespacedVirtualMachineTemplateRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	namespace string
	continue_ *string
	fieldSelector *string
	includeUninitialized *bool
	labelSelector *string
	limit *int32
	resourceVersion *string
	timeoutSeconds *int32
	watch *bool
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListNamespacedVirtualMachineTemplateRequest) Continue_(continue_ string) ApiListNamespacedVirtualMachineTemplateRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListNamespacedVirtualMachineTemplateRequest) FieldSelector(fieldSelector string) ApiListNamespacedVirtualMachineTemplateRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// If true, partially initialized resources are included in the response.
func (r ApiListNamespacedVirtualMachineTemplateRequest) IncludeUninitialized(includeUninitialized bool) ApiListNamespacedVirtualMachineTemplateRequest {
	r.includeUninitialized = &includeUninitialized
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything
func (r ApiListNamespacedVirtualMachineTemplateRequest) LabelSelector(labelSelector string) ApiListNamespacedVirtualMachineTemplateRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListNamespacedVirtualMachineTemplateRequest) Limit(limit int32) ApiListNamespacedVirtualMachineTemplateRequest {
	r.limit = &limit
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
func (r ApiListNamespacedVirtualMachineTemplateRequest) ResourceVersion(resourceVersion string) ApiListNamespacedVirtualMachineTemplateRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// TimeoutSeconds for the list/watch call.
func (r ApiListNamespacedVirtualMachineTemplateRequest) TimeoutSeconds(timeoutSeconds int32) ApiListNamespacedVirtualMachineTemplateRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListNamespacedVirtualMachineTemplateRequest) Watch(watch bool) ApiListNamespacedVirtualMachineTemplateRequest {
	r.watch = &watch
	return r
}

func (r ApiListNamespacedVirtualMachineTemplateRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplateList, *http.Response, error) {
	return r.ApiService.ListNamespacedVirtualMachineTemplateExecute(r)
}

/*
ListNamespacedVirtualMachineTemplate List Namespaced Virtual Machine Templates

Get a list of VirtualMachineTemplate objects in a namespace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiListNamespacedVirtualMachineTemplateRequest
*/
func (a *VirtualMachineTemplatesAPIService) ListNamespacedVirtualMachineTemplate(ctx context.Context, namespace string) ApiListNamespacedVirtualMachineTemplateRequest {
	return ApiListNamespacedVirtualMachineTemplateRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplateList
func (a *VirtualMachineTemplatesAPIService) ListNamespacedVirtualMachineTemplateExecute(r ApiListNamespacedVirtualMachineTemplateRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.ListNamespacedVirtualMachineTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/namespaces/{namespace}/virtualmachinetemplates"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.includeUninitialized != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeUninitialized", r.includeUninitialized, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNamespacedVirtualMachineTemplateVersionRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	namespace string
	continue_ *string
	fieldSelector *string
	includeUninitialized *bool
	labelSelector *string
	limit *int32
	resourceVersion *string
	timeoutSeconds *int32
	watch *bool
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListNamespacedVirtualMachineTemplateVersionRequest) Continue_(continue_ string) ApiListNamespacedVirtualMachineTemplateVersionRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListNamespacedVirtualMachineTemplateVersionRequest) FieldSelector(fieldSelector string) ApiListNamespacedVirtualMachineTemplateVersionRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// If true, partially initialized resources are included in the response.
func (r ApiListNamespacedVirtualMachineTemplateVersionRequest) IncludeUninitialized(includeUninitialized bool) ApiListNamespacedVirtualMachineTemplateVersionRequest {
	r.includeUninitialized = &includeUninitialized
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything
func (r ApiListNamespacedVirtualMachineTemplateVersionRequest) LabelSelector(labelSelector string) ApiListNamespacedVirtualMachineTemplateVersionRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListNamespacedVirtualMachineTemplateVersionRequest) Limit(limit int32) ApiListNamespacedVirtualMachineTemplateVersionRequest {
	r.limit = &limit
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
func (r ApiListNamespacedVirtualMachineTemplateVersionRequest) ResourceVersion(resourceVersion string) ApiListNamespacedVirtualMachineTemplateVersionRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// TimeoutSeconds for the list/watch call.
func (r ApiListNamespacedVirtualMachineTemplateVersionRequest) TimeoutSeconds(timeoutSeconds int32) ApiListNamespacedVirtualMachineTemplateVersionRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListNamespacedVirtualMachineTemplateVersionRequest) Watch(watch bool) ApiListNamespacedVirtualMachineTemplateVersionRequest {
	r.watch = &watch
	return r
}

func (r ApiListNamespacedVirtualMachineTemplateVersionRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplateVersionList, *http.Response, error) {
	return r.ApiService.ListNamespacedVirtualMachineTemplateVersionExecute(r)
}

/*
ListNamespacedVirtualMachineTemplateVersion List Namespaced Virtual Machine Template Versions

Get a list of VirtualMachineTemplateVersion objects in a namespace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiListNamespacedVirtualMachineTemplateVersionRequest
*/
func (a *VirtualMachineTemplatesAPIService) ListNamespacedVirtualMachineTemplateVersion(ctx context.Context, namespace string) ApiListNamespacedVirtualMachineTemplateVersionRequest {
	return ApiListNamespacedVirtualMachineTemplateVersionRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplateVersionList
func (a *VirtualMachineTemplatesAPIService) ListNamespacedVirtualMachineTemplateVersionExecute(r ApiListNamespacedVirtualMachineTemplateVersionRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplateVersionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplateVersionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.ListNamespacedVirtualMachineTemplateVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/namespaces/{namespace}/virtualmachinetemplateversions"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.includeUninitialized != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeUninitialized", r.includeUninitialized, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListVirtualMachineTemplateForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	continue_ *string
	fieldSelector *string
	includeUninitialized *bool
	labelSelector *string
	limit *int32
	resourceVersion *string
	timeoutSeconds *int32
	watch *bool
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListVirtualMachineTemplateForAllNamespacesRequest) Continue_(continue_ string) ApiListVirtualMachineTemplateForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListVirtualMachineTemplateForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiListVirtualMachineTemplateForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// If true, partially initialized resources are included in the response.
func (r ApiListVirtualMachineTemplateForAllNamespacesRequest) IncludeUninitialized(includeUninitialized bool) ApiListVirtualMachineTemplateForAllNamespacesRequest {
	r.includeUninitialized = &includeUninitialized
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything
func (r ApiListVirtualMachineTemplateForAllNamespacesRequest) LabelSelector(labelSelector string) ApiListVirtualMachineTemplateForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListVirtualMachineTemplateForAllNamespacesRequest) Limit(limit int32) ApiListVirtualMachineTemplateForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
func (r ApiListVirtualMachineTemplateForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiListVirtualMachineTemplateForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// TimeoutSeconds for the list/watch call.
func (r ApiListVirtualMachineTemplateForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiListVirtualMachineTemplateForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListVirtualMachineTemplateForAllNamespacesRequest) Watch(watch bool) ApiListVirtualMachineTemplateForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiListVirtualMachineTemplateForAllNamespacesRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplateList, *http.Response, error) {
	return r.ApiService.ListVirtualMachineTemplateForAllNamespacesExecute(r)
}

/*
ListVirtualMachineTemplateForAllNamespaces List Virtual Machine Templates For All Namespaces

Get a list of all VirtualMachineTemplate objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListVirtualMachineTemplateForAllNamespacesRequest
*/
func (a *VirtualMachineTemplatesAPIService) ListVirtualMachineTemplateForAllNamespaces(ctx context.Context) ApiListVirtualMachineTemplateForAllNamespacesRequest {
	return ApiListVirtualMachineTemplateForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplateList
func (a *VirtualMachineTemplatesAPIService) ListVirtualMachineTemplateForAllNamespacesExecute(r ApiListVirtualMachineTemplateForAllNamespacesRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.ListVirtualMachineTemplateForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/virtualmachinetemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.includeUninitialized != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeUninitialized", r.includeUninitialized, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListVirtualMachineTemplateVersionForAllNamespacesRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	continue_ *string
	fieldSelector *string
	includeUninitialized *bool
	labelSelector *string
	limit *int32
	resourceVersion *string
	timeoutSeconds *int32
	watch *bool
}

// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
func (r ApiListVirtualMachineTemplateVersionForAllNamespacesRequest) Continue_(continue_ string) ApiListVirtualMachineTemplateVersionForAllNamespacesRequest {
	r.continue_ = &continue_
	return r
}

// A selector to restrict the list of returned objects by their fields. Defaults to everything.
func (r ApiListVirtualMachineTemplateVersionForAllNamespacesRequest) FieldSelector(fieldSelector string) ApiListVirtualMachineTemplateVersionForAllNamespacesRequest {
	r.fieldSelector = &fieldSelector
	return r
}

// If true, partially initialized resources are included in the response.
func (r ApiListVirtualMachineTemplateVersionForAllNamespacesRequest) IncludeUninitialized(includeUninitialized bool) ApiListVirtualMachineTemplateVersionForAllNamespacesRequest {
	r.includeUninitialized = &includeUninitialized
	return r
}

// A selector to restrict the list of returned objects by their labels. Defaults to everything
func (r ApiListVirtualMachineTemplateVersionForAllNamespacesRequest) LabelSelector(labelSelector string) ApiListVirtualMachineTemplateVersionForAllNamespacesRequest {
	r.labelSelector = &labelSelector
	return r
}

// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
func (r ApiListVirtualMachineTemplateVersionForAllNamespacesRequest) Limit(limit int32) ApiListVirtualMachineTemplateVersionForAllNamespacesRequest {
	r.limit = &limit
	return r
}

// When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
func (r ApiListVirtualMachineTemplateVersionForAllNamespacesRequest) ResourceVersion(resourceVersion string) ApiListVirtualMachineTemplateVersionForAllNamespacesRequest {
	r.resourceVersion = &resourceVersion
	return r
}

// TimeoutSeconds for the list/watch call.
func (r ApiListVirtualMachineTemplateVersionForAllNamespacesRequest) TimeoutSeconds(timeoutSeconds int32) ApiListVirtualMachineTemplateVersionForAllNamespacesRequest {
	r.timeoutSeconds = &timeoutSeconds
	return r
}

// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
func (r ApiListVirtualMachineTemplateVersionForAllNamespacesRequest) Watch(watch bool) ApiListVirtualMachineTemplateVersionForAllNamespacesRequest {
	r.watch = &watch
	return r
}

func (r ApiListVirtualMachineTemplateVersionForAllNamespacesRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplateVersionList, *http.Response, error) {
	return r.ApiService.ListVirtualMachineTemplateVersionForAllNamespacesExecute(r)
}

/*
ListVirtualMachineTemplateVersionForAllNamespaces List Virtual Machine Template Versions For All Namespaces

Get a list of all VirtualMachineTemplateVersion objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListVirtualMachineTemplateVersionForAllNamespacesRequest
*/
func (a *VirtualMachineTemplatesAPIService) ListVirtualMachineTemplateVersionForAllNamespaces(ctx context.Context) ApiListVirtualMachineTemplateVersionForAllNamespacesRequest {
	return ApiListVirtualMachineTemplateVersionForAllNamespacesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplateVersionList
func (a *VirtualMachineTemplatesAPIService) ListVirtualMachineTemplateVersionForAllNamespacesExecute(r ApiListVirtualMachineTemplateVersionForAllNamespacesRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplateVersionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplateVersionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.ListVirtualMachineTemplateVersionForAllNamespaces")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/virtualmachinetemplateversions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.continue_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "continue", r.continue_, "")
	}
	if r.fieldSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fieldSelector", r.fieldSelector, "")
	}
	if r.includeUninitialized != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeUninitialized", r.includeUninitialized, "")
	}
	if r.labelSelector != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "labelSelector", r.labelSelector, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.resourceVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resourceVersion", r.resourceVersion, "")
	}
	if r.timeoutSeconds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "timeoutSeconds", r.timeoutSeconds, "")
	}
	if r.watch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "watch", r.watch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchNamespacedVirtualMachineTemplateRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	name string
	namespace string
	body *map[string]interface{}
}

func (r ApiPatchNamespacedVirtualMachineTemplateRequest) Body(body map[string]interface{}) ApiPatchNamespacedVirtualMachineTemplateRequest {
	r.body = &body
	return r
}

func (r ApiPatchNamespacedVirtualMachineTemplateRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplate, *http.Response, error) {
	return r.ApiService.PatchNamespacedVirtualMachineTemplateExecute(r)
}

/*
PatchNamespacedVirtualMachineTemplate Patch a Namespaced Virtual Machine Template

Patch a VirtualMachineTemplate object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiPatchNamespacedVirtualMachineTemplateRequest
*/
func (a *VirtualMachineTemplatesAPIService) PatchNamespacedVirtualMachineTemplate(ctx context.Context, name string, namespace string) ApiPatchNamespacedVirtualMachineTemplateRequest {
	return ApiPatchNamespacedVirtualMachineTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplate
func (a *VirtualMachineTemplatesAPIService) PatchNamespacedVirtualMachineTemplateExecute(r ApiPatchNamespacedVirtualMachineTemplateRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.PatchNamespacedVirtualMachineTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/namespaces/{namespace}/virtualmachinetemplates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchNamespacedVirtualMachineTemplateVersionRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	name string
	namespace string
	body *map[string]interface{}
}

func (r ApiPatchNamespacedVirtualMachineTemplateVersionRequest) Body(body map[string]interface{}) ApiPatchNamespacedVirtualMachineTemplateVersionRequest {
	r.body = &body
	return r
}

func (r ApiPatchNamespacedVirtualMachineTemplateVersionRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplateVersion, *http.Response, error) {
	return r.ApiService.PatchNamespacedVirtualMachineTemplateVersionExecute(r)
}

/*
PatchNamespacedVirtualMachineTemplateVersion Patch a Namespaced Virtual Machine Template Version

Patch a VirtualMachineTemplateVersion object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiPatchNamespacedVirtualMachineTemplateVersionRequest
*/
func (a *VirtualMachineTemplatesAPIService) PatchNamespacedVirtualMachineTemplateVersion(ctx context.Context, name string, namespace string) ApiPatchNamespacedVirtualMachineTemplateVersionRequest {
	return ApiPatchNamespacedVirtualMachineTemplateVersionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplateVersion
func (a *VirtualMachineTemplatesAPIService) PatchNamespacedVirtualMachineTemplateVersionExecute(r ApiPatchNamespacedVirtualMachineTemplateVersionRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplateVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplateVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.PatchNamespacedVirtualMachineTemplateVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/namespaces/{namespace}/virtualmachinetemplateversions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/merge-patch+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadNamespacedVirtualMachineTemplateRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	name string
	namespace string
	exact *bool
	export *bool
}

// Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
func (r ApiReadNamespacedVirtualMachineTemplateRequest) Exact(exact bool) ApiReadNamespacedVirtualMachineTemplateRequest {
	r.exact = &exact
	return r
}

// Should this value be exported. Export strips fields that a user can not specify.
func (r ApiReadNamespacedVirtualMachineTemplateRequest) Export(export bool) ApiReadNamespacedVirtualMachineTemplateRequest {
	r.export = &export
	return r
}

func (r ApiReadNamespacedVirtualMachineTemplateRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplate, *http.Response, error) {
	return r.ApiService.ReadNamespacedVirtualMachineTemplateExecute(r)
}

/*
ReadNamespacedVirtualMachineTemplate Read a Namespaced Virtual Machine Template

Get a VirtualMachineTemplate object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiReadNamespacedVirtualMachineTemplateRequest
*/
func (a *VirtualMachineTemplatesAPIService) ReadNamespacedVirtualMachineTemplate(ctx context.Context, name string, namespace string) ApiReadNamespacedVirtualMachineTemplateRequest {
	return ApiReadNamespacedVirtualMachineTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplate
func (a *VirtualMachineTemplatesAPIService) ReadNamespacedVirtualMachineTemplateExecute(r ApiReadNamespacedVirtualMachineTemplateRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.ReadNamespacedVirtualMachineTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/namespaces/{namespace}/virtualmachinetemplates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.exact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exact", r.exact, "")
	}
	if r.export != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "export", r.export, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadNamespacedVirtualMachineTemplateVersionRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	name string
	namespace string
	exact *bool
	export *bool
}

// Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
func (r ApiReadNamespacedVirtualMachineTemplateVersionRequest) Exact(exact bool) ApiReadNamespacedVirtualMachineTemplateVersionRequest {
	r.exact = &exact
	return r
}

// Should this value be exported. Export strips fields that a user can not specify.
func (r ApiReadNamespacedVirtualMachineTemplateVersionRequest) Export(export bool) ApiReadNamespacedVirtualMachineTemplateVersionRequest {
	r.export = &export
	return r
}

func (r ApiReadNamespacedVirtualMachineTemplateVersionRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplateVersion, *http.Response, error) {
	return r.ApiService.ReadNamespacedVirtualMachineTemplateVersionExecute(r)
}

/*
ReadNamespacedVirtualMachineTemplateVersion Read a Namespaced Virtual Machine Template Version

Get a VirtualMachineTemplateVersion object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiReadNamespacedVirtualMachineTemplateVersionRequest
*/
func (a *VirtualMachineTemplatesAPIService) ReadNamespacedVirtualMachineTemplateVersion(ctx context.Context, name string, namespace string) ApiReadNamespacedVirtualMachineTemplateVersionRequest {
	return ApiReadNamespacedVirtualMachineTemplateVersionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplateVersion
func (a *VirtualMachineTemplatesAPIService) ReadNamespacedVirtualMachineTemplateVersionExecute(r ApiReadNamespacedVirtualMachineTemplateVersionRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplateVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplateVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.ReadNamespacedVirtualMachineTemplateVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/namespaces/{namespace}/virtualmachinetemplateversions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.exact != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exact", r.exact, "")
	}
	if r.export != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "export", r.export, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/json;stream=watch", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceNamespacedVirtualMachineTemplateRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	name string
	namespace string
	harvesterhciIoV1beta1VirtualMachineTemplate *HarvesterhciIoV1beta1VirtualMachineTemplate
}

func (r ApiReplaceNamespacedVirtualMachineTemplateRequest) HarvesterhciIoV1beta1VirtualMachineTemplate(harvesterhciIoV1beta1VirtualMachineTemplate HarvesterhciIoV1beta1VirtualMachineTemplate) ApiReplaceNamespacedVirtualMachineTemplateRequest {
	r.harvesterhciIoV1beta1VirtualMachineTemplate = &harvesterhciIoV1beta1VirtualMachineTemplate
	return r
}

func (r ApiReplaceNamespacedVirtualMachineTemplateRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplate, *http.Response, error) {
	return r.ApiService.ReplaceNamespacedVirtualMachineTemplateExecute(r)
}

/*
ReplaceNamespacedVirtualMachineTemplate Replace a Namespaced Virtual Machine Template

Update a VirtualMachineTemplate object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiReplaceNamespacedVirtualMachineTemplateRequest
*/
func (a *VirtualMachineTemplatesAPIService) ReplaceNamespacedVirtualMachineTemplate(ctx context.Context, name string, namespace string) ApiReplaceNamespacedVirtualMachineTemplateRequest {
	return ApiReplaceNamespacedVirtualMachineTemplateRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplate
func (a *VirtualMachineTemplatesAPIService) ReplaceNamespacedVirtualMachineTemplateExecute(r ApiReplaceNamespacedVirtualMachineTemplateRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.ReplaceNamespacedVirtualMachineTemplate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/namespaces/{namespace}/virtualmachinetemplates/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.harvesterhciIoV1beta1VirtualMachineTemplate == nil {
		return localVarReturnValue, nil, reportError("harvesterhciIoV1beta1VirtualMachineTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.harvesterhciIoV1beta1VirtualMachineTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReplaceNamespacedVirtualMachineTemplateVersionRequest struct {
	ctx context.Context
	ApiService *VirtualMachineTemplatesAPIService
	name string
	namespace string
	harvesterhciIoV1beta1VirtualMachineTemplateVersion *HarvesterhciIoV1beta1VirtualMachineTemplateVersion
}

func (r ApiReplaceNamespacedVirtualMachineTemplateVersionRequest) HarvesterhciIoV1beta1VirtualMachineTemplateVersion(harvesterhciIoV1beta1VirtualMachineTemplateVersion HarvesterhciIoV1beta1VirtualMachineTemplateVersion) ApiReplaceNamespacedVirtualMachineTemplateVersionRequest {
	r.harvesterhciIoV1beta1VirtualMachineTemplateVersion = &harvesterhciIoV1beta1VirtualMachineTemplateVersion
	return r
}

func (r ApiReplaceNamespacedVirtualMachineTemplateVersionRequest) Execute() (*HarvesterhciIoV1beta1VirtualMachineTemplateVersion, *http.Response, error) {
	return r.ApiService.ReplaceNamespacedVirtualMachineTemplateVersionExecute(r)
}

/*
ReplaceNamespacedVirtualMachineTemplateVersion Replace a Namespaced Virtual Machine Template Version

Update a VirtualMachineTemplateVersion object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Name of the resource
 @param namespace Object name and auth scope, such as for teams and projects
 @return ApiReplaceNamespacedVirtualMachineTemplateVersionRequest
*/
func (a *VirtualMachineTemplatesAPIService) ReplaceNamespacedVirtualMachineTemplateVersion(ctx context.Context, name string, namespace string) ApiReplaceNamespacedVirtualMachineTemplateVersionRequest {
	return ApiReplaceNamespacedVirtualMachineTemplateVersionRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return HarvesterhciIoV1beta1VirtualMachineTemplateVersion
func (a *VirtualMachineTemplatesAPIService) ReplaceNamespacedVirtualMachineTemplateVersionExecute(r ApiReplaceNamespacedVirtualMachineTemplateVersionRequest) (*HarvesterhciIoV1beta1VirtualMachineTemplateVersion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HarvesterhciIoV1beta1VirtualMachineTemplateVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualMachineTemplatesAPIService.ReplaceNamespacedVirtualMachineTemplateVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apis/harvesterhci.io/v1beta1/namespaces/{namespace}/virtualmachinetemplateversions/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.harvesterhciIoV1beta1VirtualMachineTemplateVersion == nil {
		return localVarReturnValue, nil, reportError("harvesterhciIoV1beta1VirtualMachineTemplateVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.harvesterhciIoV1beta1VirtualMachineTemplateVersion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
