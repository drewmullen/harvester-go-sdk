/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HarvesterhciIoV1beta1VirtualMachineBackupSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarvesterhciIoV1beta1VirtualMachineBackupSpec{}

// HarvesterhciIoV1beta1VirtualMachineBackupSpec struct for HarvesterhciIoV1beta1VirtualMachineBackupSpec
type HarvesterhciIoV1beta1VirtualMachineBackupSpec struct {
	Source K8sIoV1TypedLocalObjectReference `json:"source"`
	Type *string `json:"type,omitempty"`
}

type _HarvesterhciIoV1beta1VirtualMachineBackupSpec HarvesterhciIoV1beta1VirtualMachineBackupSpec

// NewHarvesterhciIoV1beta1VirtualMachineBackupSpec instantiates a new HarvesterhciIoV1beta1VirtualMachineBackupSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarvesterhciIoV1beta1VirtualMachineBackupSpec(source K8sIoV1TypedLocalObjectReference) *HarvesterhciIoV1beta1VirtualMachineBackupSpec {
	this := HarvesterhciIoV1beta1VirtualMachineBackupSpec{}
	this.Source = source
	return &this
}

// NewHarvesterhciIoV1beta1VirtualMachineBackupSpecWithDefaults instantiates a new HarvesterhciIoV1beta1VirtualMachineBackupSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarvesterhciIoV1beta1VirtualMachineBackupSpecWithDefaults() *HarvesterhciIoV1beta1VirtualMachineBackupSpec {
	this := HarvesterhciIoV1beta1VirtualMachineBackupSpec{}
	return &this
}

// GetSource returns the Source field value
func (o *HarvesterhciIoV1beta1VirtualMachineBackupSpec) GetSource() K8sIoV1TypedLocalObjectReference {
	if o == nil {
		var ret K8sIoV1TypedLocalObjectReference
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineBackupSpec) GetSourceOk() (*K8sIoV1TypedLocalObjectReference, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *HarvesterhciIoV1beta1VirtualMachineBackupSpec) SetSource(v K8sIoV1TypedLocalObjectReference) {
	o.Source = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VirtualMachineBackupSpec) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineBackupSpec) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineBackupSpec) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HarvesterhciIoV1beta1VirtualMachineBackupSpec) SetType(v string) {
	o.Type = &v
}

func (o HarvesterhciIoV1beta1VirtualMachineBackupSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarvesterhciIoV1beta1VirtualMachineBackupSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *HarvesterhciIoV1beta1VirtualMachineBackupSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHarvesterhciIoV1beta1VirtualMachineBackupSpec := _HarvesterhciIoV1beta1VirtualMachineBackupSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHarvesterhciIoV1beta1VirtualMachineBackupSpec)

	if err != nil {
		return err
	}

	*o = HarvesterhciIoV1beta1VirtualMachineBackupSpec(varHarvesterhciIoV1beta1VirtualMachineBackupSpec)

	return err
}

type NullableHarvesterhciIoV1beta1VirtualMachineBackupSpec struct {
	value *HarvesterhciIoV1beta1VirtualMachineBackupSpec
	isSet bool
}

func (v NullableHarvesterhciIoV1beta1VirtualMachineBackupSpec) Get() *HarvesterhciIoV1beta1VirtualMachineBackupSpec {
	return v.value
}

func (v *NullableHarvesterhciIoV1beta1VirtualMachineBackupSpec) Set(val *HarvesterhciIoV1beta1VirtualMachineBackupSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableHarvesterhciIoV1beta1VirtualMachineBackupSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableHarvesterhciIoV1beta1VirtualMachineBackupSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarvesterhciIoV1beta1VirtualMachineBackupSpec(val *HarvesterhciIoV1beta1VirtualMachineBackupSpec) *NullableHarvesterhciIoV1beta1VirtualMachineBackupSpec {
	return &NullableHarvesterhciIoV1beta1VirtualMachineBackupSpec{value: val, isSet: true}
}

func (v NullableHarvesterhciIoV1beta1VirtualMachineBackupSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarvesterhciIoV1beta1VirtualMachineBackupSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


