/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HarvesterhciIoV1beta1SupportBundleSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarvesterhciIoV1beta1SupportBundleSpec{}

// HarvesterhciIoV1beta1SupportBundleSpec struct for HarvesterhciIoV1beta1SupportBundleSpec
type HarvesterhciIoV1beta1SupportBundleSpec struct {
	Description string `json:"description"`
	IssueURL *string `json:"issueURL,omitempty"`
}

type _HarvesterhciIoV1beta1SupportBundleSpec HarvesterhciIoV1beta1SupportBundleSpec

// NewHarvesterhciIoV1beta1SupportBundleSpec instantiates a new HarvesterhciIoV1beta1SupportBundleSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarvesterhciIoV1beta1SupportBundleSpec(description string) *HarvesterhciIoV1beta1SupportBundleSpec {
	this := HarvesterhciIoV1beta1SupportBundleSpec{}
	this.Description = description
	var issueURL string = ""
	this.IssueURL = &issueURL
	return &this
}

// NewHarvesterhciIoV1beta1SupportBundleSpecWithDefaults instantiates a new HarvesterhciIoV1beta1SupportBundleSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarvesterhciIoV1beta1SupportBundleSpecWithDefaults() *HarvesterhciIoV1beta1SupportBundleSpec {
	this := HarvesterhciIoV1beta1SupportBundleSpec{}
	var description string = ""
	this.Description = description
	var issueURL string = ""
	this.IssueURL = &issueURL
	return &this
}

// GetDescription returns the Description field value
func (o *HarvesterhciIoV1beta1SupportBundleSpec) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1SupportBundleSpec) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *HarvesterhciIoV1beta1SupportBundleSpec) SetDescription(v string) {
	o.Description = v
}

// GetIssueURL returns the IssueURL field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1SupportBundleSpec) GetIssueURL() string {
	if o == nil || IsNil(o.IssueURL) {
		var ret string
		return ret
	}
	return *o.IssueURL
}

// GetIssueURLOk returns a tuple with the IssueURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1SupportBundleSpec) GetIssueURLOk() (*string, bool) {
	if o == nil || IsNil(o.IssueURL) {
		return nil, false
	}
	return o.IssueURL, true
}

// HasIssueURL returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1SupportBundleSpec) HasIssueURL() bool {
	if o != nil && !IsNil(o.IssueURL) {
		return true
	}

	return false
}

// SetIssueURL gets a reference to the given string and assigns it to the IssueURL field.
func (o *HarvesterhciIoV1beta1SupportBundleSpec) SetIssueURL(v string) {
	o.IssueURL = &v
}

func (o HarvesterhciIoV1beta1SupportBundleSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarvesterhciIoV1beta1SupportBundleSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	if !IsNil(o.IssueURL) {
		toSerialize["issueURL"] = o.IssueURL
	}
	return toSerialize, nil
}

func (o *HarvesterhciIoV1beta1SupportBundleSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHarvesterhciIoV1beta1SupportBundleSpec := _HarvesterhciIoV1beta1SupportBundleSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHarvesterhciIoV1beta1SupportBundleSpec)

	if err != nil {
		return err
	}

	*o = HarvesterhciIoV1beta1SupportBundleSpec(varHarvesterhciIoV1beta1SupportBundleSpec)

	return err
}

type NullableHarvesterhciIoV1beta1SupportBundleSpec struct {
	value *HarvesterhciIoV1beta1SupportBundleSpec
	isSet bool
}

func (v NullableHarvesterhciIoV1beta1SupportBundleSpec) Get() *HarvesterhciIoV1beta1SupportBundleSpec {
	return v.value
}

func (v *NullableHarvesterhciIoV1beta1SupportBundleSpec) Set(val *HarvesterhciIoV1beta1SupportBundleSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableHarvesterhciIoV1beta1SupportBundleSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableHarvesterhciIoV1beta1SupportBundleSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarvesterhciIoV1beta1SupportBundleSpec(val *HarvesterhciIoV1beta1SupportBundleSpec) *NullableHarvesterhciIoV1beta1SupportBundleSpec {
	return &NullableHarvesterhciIoV1beta1SupportBundleSpec{value: val, isSet: true}
}

func (v NullableHarvesterhciIoV1beta1SupportBundleSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarvesterhciIoV1beta1SupportBundleSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


