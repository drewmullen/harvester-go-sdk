/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
)

// checks if the K8sIoV1Toleration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &K8sIoV1Toleration{}

// K8sIoV1Toleration struct for K8sIoV1Toleration
type K8sIoV1Toleration struct {
	Effect *string `json:"effect,omitempty"`
	Key *string `json:"key,omitempty"`
	Operator *string `json:"operator,omitempty"`
	TolerationSeconds *int64 `json:"tolerationSeconds,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewK8sIoV1Toleration instantiates a new K8sIoV1Toleration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewK8sIoV1Toleration() *K8sIoV1Toleration {
	this := K8sIoV1Toleration{}
	return &this
}

// NewK8sIoV1TolerationWithDefaults instantiates a new K8sIoV1Toleration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewK8sIoV1TolerationWithDefaults() *K8sIoV1Toleration {
	this := K8sIoV1Toleration{}
	return &this
}

// GetEffect returns the Effect field value if set, zero value otherwise.
func (o *K8sIoV1Toleration) GetEffect() string {
	if o == nil || IsNil(o.Effect) {
		var ret string
		return ret
	}
	return *o.Effect
}

// GetEffectOk returns a tuple with the Effect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1Toleration) GetEffectOk() (*string, bool) {
	if o == nil || IsNil(o.Effect) {
		return nil, false
	}
	return o.Effect, true
}

// HasEffect returns a boolean if a field has been set.
func (o *K8sIoV1Toleration) HasEffect() bool {
	if o != nil && !IsNil(o.Effect) {
		return true
	}

	return false
}

// SetEffect gets a reference to the given string and assigns it to the Effect field.
func (o *K8sIoV1Toleration) SetEffect(v string) {
	o.Effect = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *K8sIoV1Toleration) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1Toleration) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *K8sIoV1Toleration) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *K8sIoV1Toleration) SetKey(v string) {
	o.Key = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *K8sIoV1Toleration) GetOperator() string {
	if o == nil || IsNil(o.Operator) {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1Toleration) GetOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *K8sIoV1Toleration) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *K8sIoV1Toleration) SetOperator(v string) {
	o.Operator = &v
}

// GetTolerationSeconds returns the TolerationSeconds field value if set, zero value otherwise.
func (o *K8sIoV1Toleration) GetTolerationSeconds() int64 {
	if o == nil || IsNil(o.TolerationSeconds) {
		var ret int64
		return ret
	}
	return *o.TolerationSeconds
}

// GetTolerationSecondsOk returns a tuple with the TolerationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1Toleration) GetTolerationSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.TolerationSeconds) {
		return nil, false
	}
	return o.TolerationSeconds, true
}

// HasTolerationSeconds returns a boolean if a field has been set.
func (o *K8sIoV1Toleration) HasTolerationSeconds() bool {
	if o != nil && !IsNil(o.TolerationSeconds) {
		return true
	}

	return false
}

// SetTolerationSeconds gets a reference to the given int64 and assigns it to the TolerationSeconds field.
func (o *K8sIoV1Toleration) SetTolerationSeconds(v int64) {
	o.TolerationSeconds = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *K8sIoV1Toleration) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1Toleration) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *K8sIoV1Toleration) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *K8sIoV1Toleration) SetValue(v string) {
	o.Value = &v
}

func (o K8sIoV1Toleration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o K8sIoV1Toleration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Effect) {
		toSerialize["effect"] = o.Effect
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !IsNil(o.TolerationSeconds) {
		toSerialize["tolerationSeconds"] = o.TolerationSeconds
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableK8sIoV1Toleration struct {
	value *K8sIoV1Toleration
	isSet bool
}

func (v NullableK8sIoV1Toleration) Get() *K8sIoV1Toleration {
	return v.value
}

func (v *NullableK8sIoV1Toleration) Set(val *K8sIoV1Toleration) {
	v.value = val
	v.isSet = true
}

func (v NullableK8sIoV1Toleration) IsSet() bool {
	return v.isSet
}

func (v *NullableK8sIoV1Toleration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableK8sIoV1Toleration(val *K8sIoV1Toleration) *NullableK8sIoV1Toleration {
	return &NullableK8sIoV1Toleration{value: val, isSet: true}
}

func (v NullableK8sIoV1Toleration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableK8sIoV1Toleration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


