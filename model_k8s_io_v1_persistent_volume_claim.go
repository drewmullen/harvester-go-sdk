/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the K8sIoV1PersistentVolumeClaim type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &K8sIoV1PersistentVolumeClaim{}

// K8sIoV1PersistentVolumeClaim struct for K8sIoV1PersistentVolumeClaim
type K8sIoV1PersistentVolumeClaim struct {
	ApiVersion string `json:"apiVersion"`
	Kind string `json:"kind"`
	Metadata *K8sIoV1ObjectMeta `json:"metadata,omitempty"`
	Spec *K8sIoV1PersistentVolumeClaimSpec `json:"spec,omitempty"`
	Status *K8sIoV1PersistentVolumeClaimStatus `json:"status,omitempty"`
}

type _K8sIoV1PersistentVolumeClaim K8sIoV1PersistentVolumeClaim

// NewK8sIoV1PersistentVolumeClaim instantiates a new K8sIoV1PersistentVolumeClaim object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewK8sIoV1PersistentVolumeClaim(apiVersion string, kind string) *K8sIoV1PersistentVolumeClaim {
	this := K8sIoV1PersistentVolumeClaim{}
	this.ApiVersion = apiVersion
	this.Kind = kind
	return &this
}

// NewK8sIoV1PersistentVolumeClaimWithDefaults instantiates a new K8sIoV1PersistentVolumeClaim object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewK8sIoV1PersistentVolumeClaimWithDefaults() *K8sIoV1PersistentVolumeClaim {
	this := K8sIoV1PersistentVolumeClaim{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *K8sIoV1PersistentVolumeClaim) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *K8sIoV1PersistentVolumeClaim) GetApiVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *K8sIoV1PersistentVolumeClaim) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetKind returns the Kind field value
func (o *K8sIoV1PersistentVolumeClaim) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *K8sIoV1PersistentVolumeClaim) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *K8sIoV1PersistentVolumeClaim) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *K8sIoV1PersistentVolumeClaim) GetMetadata() K8sIoV1ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret K8sIoV1ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PersistentVolumeClaim) GetMetadataOk() (*K8sIoV1ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *K8sIoV1PersistentVolumeClaim) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given K8sIoV1ObjectMeta and assigns it to the Metadata field.
func (o *K8sIoV1PersistentVolumeClaim) SetMetadata(v K8sIoV1ObjectMeta) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *K8sIoV1PersistentVolumeClaim) GetSpec() K8sIoV1PersistentVolumeClaimSpec {
	if o == nil || IsNil(o.Spec) {
		var ret K8sIoV1PersistentVolumeClaimSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PersistentVolumeClaim) GetSpecOk() (*K8sIoV1PersistentVolumeClaimSpec, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *K8sIoV1PersistentVolumeClaim) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given K8sIoV1PersistentVolumeClaimSpec and assigns it to the Spec field.
func (o *K8sIoV1PersistentVolumeClaim) SetSpec(v K8sIoV1PersistentVolumeClaimSpec) {
	o.Spec = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *K8sIoV1PersistentVolumeClaim) GetStatus() K8sIoV1PersistentVolumeClaimStatus {
	if o == nil || IsNil(o.Status) {
		var ret K8sIoV1PersistentVolumeClaimStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PersistentVolumeClaim) GetStatusOk() (*K8sIoV1PersistentVolumeClaimStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *K8sIoV1PersistentVolumeClaim) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given K8sIoV1PersistentVolumeClaimStatus and assigns it to the Status field.
func (o *K8sIoV1PersistentVolumeClaim) SetStatus(v K8sIoV1PersistentVolumeClaimStatus) {
	o.Status = &v
}

func (o K8sIoV1PersistentVolumeClaim) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o K8sIoV1PersistentVolumeClaim) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiVersion"] = o.ApiVersion
	toSerialize["kind"] = o.Kind
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *K8sIoV1PersistentVolumeClaim) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"apiVersion",
		"kind",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varK8sIoV1PersistentVolumeClaim := _K8sIoV1PersistentVolumeClaim{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varK8sIoV1PersistentVolumeClaim)

	if err != nil {
		return err
	}

	*o = K8sIoV1PersistentVolumeClaim(varK8sIoV1PersistentVolumeClaim)

	return err
}

type NullableK8sIoV1PersistentVolumeClaim struct {
	value *K8sIoV1PersistentVolumeClaim
	isSet bool
}

func (v NullableK8sIoV1PersistentVolumeClaim) Get() *K8sIoV1PersistentVolumeClaim {
	return v.value
}

func (v *NullableK8sIoV1PersistentVolumeClaim) Set(val *K8sIoV1PersistentVolumeClaim) {
	v.value = val
	v.isSet = true
}

func (v NullableK8sIoV1PersistentVolumeClaim) IsSet() bool {
	return v.isSet
}

func (v *NullableK8sIoV1PersistentVolumeClaim) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableK8sIoV1PersistentVolumeClaim(val *K8sIoV1PersistentVolumeClaim) *NullableK8sIoV1PersistentVolumeClaim {
	return &NullableK8sIoV1PersistentVolumeClaim{value: val, isSet: true}
}

func (v NullableK8sIoV1PersistentVolumeClaim) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableK8sIoV1PersistentVolumeClaim) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


