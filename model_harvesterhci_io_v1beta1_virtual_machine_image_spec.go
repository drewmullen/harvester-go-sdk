/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HarvesterhciIoV1beta1VirtualMachineImageSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarvesterhciIoV1beta1VirtualMachineImageSpec{}

// HarvesterhciIoV1beta1VirtualMachineImageSpec struct for HarvesterhciIoV1beta1VirtualMachineImageSpec
type HarvesterhciIoV1beta1VirtualMachineImageSpec struct {
	Checksum *string `json:"checksum,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayName string `json:"displayName"`
	PvcName *string `json:"pvcName,omitempty"`
	PvcNamespace *string `json:"pvcNamespace,omitempty"`
	Retry *int32 `json:"retry,omitempty"`
	SourceType string `json:"sourceType"`
	StorageClassParameters *map[string]string `json:"storageClassParameters,omitempty"`
	Url *string `json:"url,omitempty"`
}

type _HarvesterhciIoV1beta1VirtualMachineImageSpec HarvesterhciIoV1beta1VirtualMachineImageSpec

// NewHarvesterhciIoV1beta1VirtualMachineImageSpec instantiates a new HarvesterhciIoV1beta1VirtualMachineImageSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarvesterhciIoV1beta1VirtualMachineImageSpec(displayName string, sourceType string) *HarvesterhciIoV1beta1VirtualMachineImageSpec {
	this := HarvesterhciIoV1beta1VirtualMachineImageSpec{}
	var checksum string = ""
	this.Checksum = &checksum
	this.DisplayName = displayName
	var pvcName string = ""
	this.PvcName = &pvcName
	var pvcNamespace string = ""
	this.PvcNamespace = &pvcNamespace
	var retry int32 = 0
	this.Retry = &retry
	this.SourceType = sourceType
	var url string = ""
	this.Url = &url
	return &this
}

// NewHarvesterhciIoV1beta1VirtualMachineImageSpecWithDefaults instantiates a new HarvesterhciIoV1beta1VirtualMachineImageSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarvesterhciIoV1beta1VirtualMachineImageSpecWithDefaults() *HarvesterhciIoV1beta1VirtualMachineImageSpec {
	this := HarvesterhciIoV1beta1VirtualMachineImageSpec{}
	var checksum string = ""
	this.Checksum = &checksum
	var displayName string = ""
	this.DisplayName = displayName
	var pvcName string = ""
	this.PvcName = &pvcName
	var pvcNamespace string = ""
	this.PvcNamespace = &pvcNamespace
	var retry int32 = 0
	this.Retry = &retry
	var sourceType string = ""
	this.SourceType = sourceType
	var url string = ""
	this.Url = &url
	return &this
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetChecksum() string {
	if o == nil || IsNil(o.Checksum) {
		var ret string
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetChecksumOk() (*string, bool) {
	if o == nil || IsNil(o.Checksum) {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) HasChecksum() bool {
	if o != nil && !IsNil(o.Checksum) {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given string and assigns it to the Checksum field.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) SetChecksum(v string) {
	o.Checksum = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetPvcName returns the PvcName field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetPvcName() string {
	if o == nil || IsNil(o.PvcName) {
		var ret string
		return ret
	}
	return *o.PvcName
}

// GetPvcNameOk returns a tuple with the PvcName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetPvcNameOk() (*string, bool) {
	if o == nil || IsNil(o.PvcName) {
		return nil, false
	}
	return o.PvcName, true
}

// HasPvcName returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) HasPvcName() bool {
	if o != nil && !IsNil(o.PvcName) {
		return true
	}

	return false
}

// SetPvcName gets a reference to the given string and assigns it to the PvcName field.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) SetPvcName(v string) {
	o.PvcName = &v
}

// GetPvcNamespace returns the PvcNamespace field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetPvcNamespace() string {
	if o == nil || IsNil(o.PvcNamespace) {
		var ret string
		return ret
	}
	return *o.PvcNamespace
}

// GetPvcNamespaceOk returns a tuple with the PvcNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetPvcNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.PvcNamespace) {
		return nil, false
	}
	return o.PvcNamespace, true
}

// HasPvcNamespace returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) HasPvcNamespace() bool {
	if o != nil && !IsNil(o.PvcNamespace) {
		return true
	}

	return false
}

// SetPvcNamespace gets a reference to the given string and assigns it to the PvcNamespace field.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) SetPvcNamespace(v string) {
	o.PvcNamespace = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetRetry() int32 {
	if o == nil || IsNil(o.Retry) {
		var ret int32
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetRetryOk() (*int32, bool) {
	if o == nil || IsNil(o.Retry) {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) HasRetry() bool {
	if o != nil && !IsNil(o.Retry) {
		return true
	}

	return false
}

// SetRetry gets a reference to the given int32 and assigns it to the Retry field.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) SetRetry(v int32) {
	o.Retry = &v
}

// GetSourceType returns the SourceType field value
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) SetSourceType(v string) {
	o.SourceType = v
}

// GetStorageClassParameters returns the StorageClassParameters field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetStorageClassParameters() map[string]string {
	if o == nil || IsNil(o.StorageClassParameters) {
		var ret map[string]string
		return ret
	}
	return *o.StorageClassParameters
}

// GetStorageClassParametersOk returns a tuple with the StorageClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetStorageClassParametersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.StorageClassParameters) {
		return nil, false
	}
	return o.StorageClassParameters, true
}

// HasStorageClassParameters returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) HasStorageClassParameters() bool {
	if o != nil && !IsNil(o.StorageClassParameters) {
		return true
	}

	return false
}

// SetStorageClassParameters gets a reference to the given map[string]string and assigns it to the StorageClassParameters field.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) SetStorageClassParameters(v map[string]string) {
	o.StorageClassParameters = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) SetUrl(v string) {
	o.Url = &v
}

func (o HarvesterhciIoV1beta1VirtualMachineImageSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarvesterhciIoV1beta1VirtualMachineImageSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Checksum) {
		toSerialize["checksum"] = o.Checksum
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.PvcName) {
		toSerialize["pvcName"] = o.PvcName
	}
	if !IsNil(o.PvcNamespace) {
		toSerialize["pvcNamespace"] = o.PvcNamespace
	}
	if !IsNil(o.Retry) {
		toSerialize["retry"] = o.Retry
	}
	toSerialize["sourceType"] = o.SourceType
	if !IsNil(o.StorageClassParameters) {
		toSerialize["storageClassParameters"] = o.StorageClassParameters
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

func (o *HarvesterhciIoV1beta1VirtualMachineImageSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"sourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHarvesterhciIoV1beta1VirtualMachineImageSpec := _HarvesterhciIoV1beta1VirtualMachineImageSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHarvesterhciIoV1beta1VirtualMachineImageSpec)

	if err != nil {
		return err
	}

	*o = HarvesterhciIoV1beta1VirtualMachineImageSpec(varHarvesterhciIoV1beta1VirtualMachineImageSpec)

	return err
}

type NullableHarvesterhciIoV1beta1VirtualMachineImageSpec struct {
	value *HarvesterhciIoV1beta1VirtualMachineImageSpec
	isSet bool
}

func (v NullableHarvesterhciIoV1beta1VirtualMachineImageSpec) Get() *HarvesterhciIoV1beta1VirtualMachineImageSpec {
	return v.value
}

func (v *NullableHarvesterhciIoV1beta1VirtualMachineImageSpec) Set(val *HarvesterhciIoV1beta1VirtualMachineImageSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableHarvesterhciIoV1beta1VirtualMachineImageSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableHarvesterhciIoV1beta1VirtualMachineImageSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarvesterhciIoV1beta1VirtualMachineImageSpec(val *HarvesterhciIoV1beta1VirtualMachineImageSpec) *NullableHarvesterhciIoV1beta1VirtualMachineImageSpec {
	return &NullableHarvesterhciIoV1beta1VirtualMachineImageSpec{value: val, isSet: true}
}

func (v NullableHarvesterhciIoV1beta1VirtualMachineImageSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarvesterhciIoV1beta1VirtualMachineImageSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


