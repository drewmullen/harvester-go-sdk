/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
)

// checks if the NetworkHarvesterhciIoV1beta1NodeNetworkStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkHarvesterhciIoV1beta1NodeNetworkStatus{}

// NetworkHarvesterhciIoV1beta1NodeNetworkStatus struct for NetworkHarvesterhciIoV1beta1NodeNetworkStatus
type NetworkHarvesterhciIoV1beta1NodeNetworkStatus struct {
	Conditions []NetworkHarvesterhciIoV1beta1Condition `json:"conditions,omitempty"`
	NetworkIDs []int32 `json:"networkIDs,omitempty"`
	NetworkLinkStatus *map[string]NetworkHarvesterhciIoV1beta1LinkStatus `json:"networkLinkStatus,omitempty"`
	Nics []NetworkHarvesterhciIoV1beta1NetworkInterface `json:"nics,omitempty"`
}

// NewNetworkHarvesterhciIoV1beta1NodeNetworkStatus instantiates a new NetworkHarvesterhciIoV1beta1NodeNetworkStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkHarvesterhciIoV1beta1NodeNetworkStatus() *NetworkHarvesterhciIoV1beta1NodeNetworkStatus {
	this := NetworkHarvesterhciIoV1beta1NodeNetworkStatus{}
	return &this
}

// NewNetworkHarvesterhciIoV1beta1NodeNetworkStatusWithDefaults instantiates a new NetworkHarvesterhciIoV1beta1NodeNetworkStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkHarvesterhciIoV1beta1NodeNetworkStatusWithDefaults() *NetworkHarvesterhciIoV1beta1NodeNetworkStatus {
	this := NetworkHarvesterhciIoV1beta1NodeNetworkStatus{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) GetConditions() []NetworkHarvesterhciIoV1beta1Condition {
	if o == nil || IsNil(o.Conditions) {
		var ret []NetworkHarvesterhciIoV1beta1Condition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) GetConditionsOk() ([]NetworkHarvesterhciIoV1beta1Condition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []NetworkHarvesterhciIoV1beta1Condition and assigns it to the Conditions field.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) SetConditions(v []NetworkHarvesterhciIoV1beta1Condition) {
	o.Conditions = v
}

// GetNetworkIDs returns the NetworkIDs field value if set, zero value otherwise.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) GetNetworkIDs() []int32 {
	if o == nil || IsNil(o.NetworkIDs) {
		var ret []int32
		return ret
	}
	return o.NetworkIDs
}

// GetNetworkIDsOk returns a tuple with the NetworkIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) GetNetworkIDsOk() ([]int32, bool) {
	if o == nil || IsNil(o.NetworkIDs) {
		return nil, false
	}
	return o.NetworkIDs, true
}

// HasNetworkIDs returns a boolean if a field has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) HasNetworkIDs() bool {
	if o != nil && !IsNil(o.NetworkIDs) {
		return true
	}

	return false
}

// SetNetworkIDs gets a reference to the given []int32 and assigns it to the NetworkIDs field.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) SetNetworkIDs(v []int32) {
	o.NetworkIDs = v
}

// GetNetworkLinkStatus returns the NetworkLinkStatus field value if set, zero value otherwise.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) GetNetworkLinkStatus() map[string]NetworkHarvesterhciIoV1beta1LinkStatus {
	if o == nil || IsNil(o.NetworkLinkStatus) {
		var ret map[string]NetworkHarvesterhciIoV1beta1LinkStatus
		return ret
	}
	return *o.NetworkLinkStatus
}

// GetNetworkLinkStatusOk returns a tuple with the NetworkLinkStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) GetNetworkLinkStatusOk() (*map[string]NetworkHarvesterhciIoV1beta1LinkStatus, bool) {
	if o == nil || IsNil(o.NetworkLinkStatus) {
		return nil, false
	}
	return o.NetworkLinkStatus, true
}

// HasNetworkLinkStatus returns a boolean if a field has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) HasNetworkLinkStatus() bool {
	if o != nil && !IsNil(o.NetworkLinkStatus) {
		return true
	}

	return false
}

// SetNetworkLinkStatus gets a reference to the given map[string]NetworkHarvesterhciIoV1beta1LinkStatus and assigns it to the NetworkLinkStatus field.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) SetNetworkLinkStatus(v map[string]NetworkHarvesterhciIoV1beta1LinkStatus) {
	o.NetworkLinkStatus = &v
}

// GetNics returns the Nics field value if set, zero value otherwise.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) GetNics() []NetworkHarvesterhciIoV1beta1NetworkInterface {
	if o == nil || IsNil(o.Nics) {
		var ret []NetworkHarvesterhciIoV1beta1NetworkInterface
		return ret
	}
	return o.Nics
}

// GetNicsOk returns a tuple with the Nics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) GetNicsOk() ([]NetworkHarvesterhciIoV1beta1NetworkInterface, bool) {
	if o == nil || IsNil(o.Nics) {
		return nil, false
	}
	return o.Nics, true
}

// HasNics returns a boolean if a field has been set.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) HasNics() bool {
	if o != nil && !IsNil(o.Nics) {
		return true
	}

	return false
}

// SetNics gets a reference to the given []NetworkHarvesterhciIoV1beta1NetworkInterface and assigns it to the Nics field.
func (o *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) SetNics(v []NetworkHarvesterhciIoV1beta1NetworkInterface) {
	o.Nics = v
}

func (o NetworkHarvesterhciIoV1beta1NodeNetworkStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkHarvesterhciIoV1beta1NodeNetworkStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.NetworkIDs) {
		toSerialize["networkIDs"] = o.NetworkIDs
	}
	if !IsNil(o.NetworkLinkStatus) {
		toSerialize["networkLinkStatus"] = o.NetworkLinkStatus
	}
	if !IsNil(o.Nics) {
		toSerialize["nics"] = o.Nics
	}
	return toSerialize, nil
}

type NullableNetworkHarvesterhciIoV1beta1NodeNetworkStatus struct {
	value *NetworkHarvesterhciIoV1beta1NodeNetworkStatus
	isSet bool
}

func (v NullableNetworkHarvesterhciIoV1beta1NodeNetworkStatus) Get() *NetworkHarvesterhciIoV1beta1NodeNetworkStatus {
	return v.value
}

func (v *NullableNetworkHarvesterhciIoV1beta1NodeNetworkStatus) Set(val *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkHarvesterhciIoV1beta1NodeNetworkStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkHarvesterhciIoV1beta1NodeNetworkStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkHarvesterhciIoV1beta1NodeNetworkStatus(val *NetworkHarvesterhciIoV1beta1NodeNetworkStatus) *NullableNetworkHarvesterhciIoV1beta1NodeNetworkStatus {
	return &NullableNetworkHarvesterhciIoV1beta1NodeNetworkStatus{value: val, isSet: true}
}

func (v NullableNetworkHarvesterhciIoV1beta1NodeNetworkStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkHarvesterhciIoV1beta1NodeNetworkStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


