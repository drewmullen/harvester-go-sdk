/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
)

// checks if the HarvesterhciIoV1beta1SupportBundleStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarvesterhciIoV1beta1SupportBundleStatus{}

// HarvesterhciIoV1beta1SupportBundleStatus struct for HarvesterhciIoV1beta1SupportBundleStatus
type HarvesterhciIoV1beta1SupportBundleStatus struct {
	Conditions []HarvesterhciIoV1beta1Condition `json:"conditions,omitempty"`
	Filename *string `json:"filename,omitempty"`
	Filesize *int64 `json:"filesize,omitempty"`
	Progress *int32 `json:"progress,omitempty"`
	State *string `json:"state,omitempty"`
}

// NewHarvesterhciIoV1beta1SupportBundleStatus instantiates a new HarvesterhciIoV1beta1SupportBundleStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarvesterhciIoV1beta1SupportBundleStatus() *HarvesterhciIoV1beta1SupportBundleStatus {
	this := HarvesterhciIoV1beta1SupportBundleStatus{}
	return &this
}

// NewHarvesterhciIoV1beta1SupportBundleStatusWithDefaults instantiates a new HarvesterhciIoV1beta1SupportBundleStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarvesterhciIoV1beta1SupportBundleStatusWithDefaults() *HarvesterhciIoV1beta1SupportBundleStatus {
	this := HarvesterhciIoV1beta1SupportBundleStatus{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) GetConditions() []HarvesterhciIoV1beta1Condition {
	if o == nil || IsNil(o.Conditions) {
		var ret []HarvesterhciIoV1beta1Condition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) GetConditionsOk() ([]HarvesterhciIoV1beta1Condition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []HarvesterhciIoV1beta1Condition and assigns it to the Conditions field.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) SetConditions(v []HarvesterhciIoV1beta1Condition) {
	o.Conditions = v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) SetFilename(v string) {
	o.Filename = &v
}

// GetFilesize returns the Filesize field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) GetFilesize() int64 {
	if o == nil || IsNil(o.Filesize) {
		var ret int64
		return ret
	}
	return *o.Filesize
}

// GetFilesizeOk returns a tuple with the Filesize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) GetFilesizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Filesize) {
		return nil, false
	}
	return o.Filesize, true
}

// HasFilesize returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) HasFilesize() bool {
	if o != nil && !IsNil(o.Filesize) {
		return true
	}

	return false
}

// SetFilesize gets a reference to the given int64 and assigns it to the Filesize field.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) SetFilesize(v int64) {
	o.Filesize = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) GetProgress() int32 {
	if o == nil || IsNil(o.Progress) {
		var ret int32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) GetProgressOk() (*int32, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int32 and assigns it to the Progress field.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) SetProgress(v int32) {
	o.Progress = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *HarvesterhciIoV1beta1SupportBundleStatus) SetState(v string) {
	o.State = &v
}

func (o HarvesterhciIoV1beta1SupportBundleStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarvesterhciIoV1beta1SupportBundleStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Filesize) {
		toSerialize["filesize"] = o.Filesize
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableHarvesterhciIoV1beta1SupportBundleStatus struct {
	value *HarvesterhciIoV1beta1SupportBundleStatus
	isSet bool
}

func (v NullableHarvesterhciIoV1beta1SupportBundleStatus) Get() *HarvesterhciIoV1beta1SupportBundleStatus {
	return v.value
}

func (v *NullableHarvesterhciIoV1beta1SupportBundleStatus) Set(val *HarvesterhciIoV1beta1SupportBundleStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableHarvesterhciIoV1beta1SupportBundleStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableHarvesterhciIoV1beta1SupportBundleStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarvesterhciIoV1beta1SupportBundleStatus(val *HarvesterhciIoV1beta1SupportBundleStatus) *NullableHarvesterhciIoV1beta1SupportBundleStatus {
	return &NullableHarvesterhciIoV1beta1SupportBundleStatus{value: val, isSet: true}
}

func (v NullableHarvesterhciIoV1beta1SupportBundleStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarvesterhciIoV1beta1SupportBundleStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


