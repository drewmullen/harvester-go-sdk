/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the K8sIoV1PersistentVolumeClaimVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &K8sIoV1PersistentVolumeClaimVolumeSource{}

// K8sIoV1PersistentVolumeClaimVolumeSource PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
type K8sIoV1PersistentVolumeClaimVolumeSource struct {
	// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName string `json:"claimName"`
	// readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
	ReadOnly *bool `json:"readOnly,omitempty"`
}

type _K8sIoV1PersistentVolumeClaimVolumeSource K8sIoV1PersistentVolumeClaimVolumeSource

// NewK8sIoV1PersistentVolumeClaimVolumeSource instantiates a new K8sIoV1PersistentVolumeClaimVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewK8sIoV1PersistentVolumeClaimVolumeSource(claimName string) *K8sIoV1PersistentVolumeClaimVolumeSource {
	this := K8sIoV1PersistentVolumeClaimVolumeSource{}
	this.ClaimName = claimName
	return &this
}

// NewK8sIoV1PersistentVolumeClaimVolumeSourceWithDefaults instantiates a new K8sIoV1PersistentVolumeClaimVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewK8sIoV1PersistentVolumeClaimVolumeSourceWithDefaults() *K8sIoV1PersistentVolumeClaimVolumeSource {
	this := K8sIoV1PersistentVolumeClaimVolumeSource{}
	var claimName string = ""
	this.ClaimName = claimName
	return &this
}

// GetClaimName returns the ClaimName field value
func (o *K8sIoV1PersistentVolumeClaimVolumeSource) GetClaimName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClaimName
}

// GetClaimNameOk returns a tuple with the ClaimName field value
// and a boolean to check if the value has been set.
func (o *K8sIoV1PersistentVolumeClaimVolumeSource) GetClaimNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClaimName, true
}

// SetClaimName sets field value
func (o *K8sIoV1PersistentVolumeClaimVolumeSource) SetClaimName(v string) {
	o.ClaimName = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *K8sIoV1PersistentVolumeClaimVolumeSource) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PersistentVolumeClaimVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *K8sIoV1PersistentVolumeClaimVolumeSource) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *K8sIoV1PersistentVolumeClaimVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

func (o K8sIoV1PersistentVolumeClaimVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o K8sIoV1PersistentVolumeClaimVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["claimName"] = o.ClaimName
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	return toSerialize, nil
}

func (o *K8sIoV1PersistentVolumeClaimVolumeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"claimName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varK8sIoV1PersistentVolumeClaimVolumeSource := _K8sIoV1PersistentVolumeClaimVolumeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varK8sIoV1PersistentVolumeClaimVolumeSource)

	if err != nil {
		return err
	}

	*o = K8sIoV1PersistentVolumeClaimVolumeSource(varK8sIoV1PersistentVolumeClaimVolumeSource)

	return err
}

type NullableK8sIoV1PersistentVolumeClaimVolumeSource struct {
	value *K8sIoV1PersistentVolumeClaimVolumeSource
	isSet bool
}

func (v NullableK8sIoV1PersistentVolumeClaimVolumeSource) Get() *K8sIoV1PersistentVolumeClaimVolumeSource {
	return v.value
}

func (v *NullableK8sIoV1PersistentVolumeClaimVolumeSource) Set(val *K8sIoV1PersistentVolumeClaimVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableK8sIoV1PersistentVolumeClaimVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableK8sIoV1PersistentVolumeClaimVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableK8sIoV1PersistentVolumeClaimVolumeSource(val *K8sIoV1PersistentVolumeClaimVolumeSource) *NullableK8sIoV1PersistentVolumeClaimVolumeSource {
	return &NullableK8sIoV1PersistentVolumeClaimVolumeSource{value: val, isSet: true}
}

func (v NullableK8sIoV1PersistentVolumeClaimVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableK8sIoV1PersistentVolumeClaimVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


