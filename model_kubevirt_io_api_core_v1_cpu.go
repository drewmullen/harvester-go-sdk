/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
)

// checks if the KubevirtIoApiCoreV1CPU type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubevirtIoApiCoreV1CPU{}

// KubevirtIoApiCoreV1CPU struct for KubevirtIoApiCoreV1CPU
type KubevirtIoApiCoreV1CPU struct {
	Cores *int64 `json:"cores,omitempty"`
	DedicatedCpuPlacement *bool `json:"dedicatedCpuPlacement,omitempty"`
	Features []KubevirtIoApiCoreV1CPUFeature `json:"features,omitempty"`
	IsolateEmulatorThread *bool `json:"isolateEmulatorThread,omitempty"`
	MaxSockets *int64 `json:"maxSockets,omitempty"`
	Model *string `json:"model,omitempty"`
	Numa *KubevirtIoApiCoreV1NUMA `json:"numa,omitempty"`
	Realtime *KubevirtIoApiCoreV1Realtime `json:"realtime,omitempty"`
	Sockets *int64 `json:"sockets,omitempty"`
	Threads *int64 `json:"threads,omitempty"`
}

// NewKubevirtIoApiCoreV1CPU instantiates a new KubevirtIoApiCoreV1CPU object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubevirtIoApiCoreV1CPU() *KubevirtIoApiCoreV1CPU {
	this := KubevirtIoApiCoreV1CPU{}
	return &this
}

// NewKubevirtIoApiCoreV1CPUWithDefaults instantiates a new KubevirtIoApiCoreV1CPU object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubevirtIoApiCoreV1CPUWithDefaults() *KubevirtIoApiCoreV1CPU {
	this := KubevirtIoApiCoreV1CPU{}
	return &this
}

// GetCores returns the Cores field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1CPU) GetCores() int64 {
	if o == nil || IsNil(o.Cores) {
		var ret int64
		return ret
	}
	return *o.Cores
}

// GetCoresOk returns a tuple with the Cores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1CPU) GetCoresOk() (*int64, bool) {
	if o == nil || IsNil(o.Cores) {
		return nil, false
	}
	return o.Cores, true
}

// HasCores returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1CPU) HasCores() bool {
	if o != nil && !IsNil(o.Cores) {
		return true
	}

	return false
}

// SetCores gets a reference to the given int64 and assigns it to the Cores field.
func (o *KubevirtIoApiCoreV1CPU) SetCores(v int64) {
	o.Cores = &v
}

// GetDedicatedCpuPlacement returns the DedicatedCpuPlacement field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1CPU) GetDedicatedCpuPlacement() bool {
	if o == nil || IsNil(o.DedicatedCpuPlacement) {
		var ret bool
		return ret
	}
	return *o.DedicatedCpuPlacement
}

// GetDedicatedCpuPlacementOk returns a tuple with the DedicatedCpuPlacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1CPU) GetDedicatedCpuPlacementOk() (*bool, bool) {
	if o == nil || IsNil(o.DedicatedCpuPlacement) {
		return nil, false
	}
	return o.DedicatedCpuPlacement, true
}

// HasDedicatedCpuPlacement returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1CPU) HasDedicatedCpuPlacement() bool {
	if o != nil && !IsNil(o.DedicatedCpuPlacement) {
		return true
	}

	return false
}

// SetDedicatedCpuPlacement gets a reference to the given bool and assigns it to the DedicatedCpuPlacement field.
func (o *KubevirtIoApiCoreV1CPU) SetDedicatedCpuPlacement(v bool) {
	o.DedicatedCpuPlacement = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1CPU) GetFeatures() []KubevirtIoApiCoreV1CPUFeature {
	if o == nil || IsNil(o.Features) {
		var ret []KubevirtIoApiCoreV1CPUFeature
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1CPU) GetFeaturesOk() ([]KubevirtIoApiCoreV1CPUFeature, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1CPU) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []KubevirtIoApiCoreV1CPUFeature and assigns it to the Features field.
func (o *KubevirtIoApiCoreV1CPU) SetFeatures(v []KubevirtIoApiCoreV1CPUFeature) {
	o.Features = v
}

// GetIsolateEmulatorThread returns the IsolateEmulatorThread field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1CPU) GetIsolateEmulatorThread() bool {
	if o == nil || IsNil(o.IsolateEmulatorThread) {
		var ret bool
		return ret
	}
	return *o.IsolateEmulatorThread
}

// GetIsolateEmulatorThreadOk returns a tuple with the IsolateEmulatorThread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1CPU) GetIsolateEmulatorThreadOk() (*bool, bool) {
	if o == nil || IsNil(o.IsolateEmulatorThread) {
		return nil, false
	}
	return o.IsolateEmulatorThread, true
}

// HasIsolateEmulatorThread returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1CPU) HasIsolateEmulatorThread() bool {
	if o != nil && !IsNil(o.IsolateEmulatorThread) {
		return true
	}

	return false
}

// SetIsolateEmulatorThread gets a reference to the given bool and assigns it to the IsolateEmulatorThread field.
func (o *KubevirtIoApiCoreV1CPU) SetIsolateEmulatorThread(v bool) {
	o.IsolateEmulatorThread = &v
}

// GetMaxSockets returns the MaxSockets field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1CPU) GetMaxSockets() int64 {
	if o == nil || IsNil(o.MaxSockets) {
		var ret int64
		return ret
	}
	return *o.MaxSockets
}

// GetMaxSocketsOk returns a tuple with the MaxSockets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1CPU) GetMaxSocketsOk() (*int64, bool) {
	if o == nil || IsNil(o.MaxSockets) {
		return nil, false
	}
	return o.MaxSockets, true
}

// HasMaxSockets returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1CPU) HasMaxSockets() bool {
	if o != nil && !IsNil(o.MaxSockets) {
		return true
	}

	return false
}

// SetMaxSockets gets a reference to the given int64 and assigns it to the MaxSockets field.
func (o *KubevirtIoApiCoreV1CPU) SetMaxSockets(v int64) {
	o.MaxSockets = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1CPU) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1CPU) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1CPU) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *KubevirtIoApiCoreV1CPU) SetModel(v string) {
	o.Model = &v
}

// GetNuma returns the Numa field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1CPU) GetNuma() KubevirtIoApiCoreV1NUMA {
	if o == nil || IsNil(o.Numa) {
		var ret KubevirtIoApiCoreV1NUMA
		return ret
	}
	return *o.Numa
}

// GetNumaOk returns a tuple with the Numa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1CPU) GetNumaOk() (*KubevirtIoApiCoreV1NUMA, bool) {
	if o == nil || IsNil(o.Numa) {
		return nil, false
	}
	return o.Numa, true
}

// HasNuma returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1CPU) HasNuma() bool {
	if o != nil && !IsNil(o.Numa) {
		return true
	}

	return false
}

// SetNuma gets a reference to the given KubevirtIoApiCoreV1NUMA and assigns it to the Numa field.
func (o *KubevirtIoApiCoreV1CPU) SetNuma(v KubevirtIoApiCoreV1NUMA) {
	o.Numa = &v
}

// GetRealtime returns the Realtime field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1CPU) GetRealtime() KubevirtIoApiCoreV1Realtime {
	if o == nil || IsNil(o.Realtime) {
		var ret KubevirtIoApiCoreV1Realtime
		return ret
	}
	return *o.Realtime
}

// GetRealtimeOk returns a tuple with the Realtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1CPU) GetRealtimeOk() (*KubevirtIoApiCoreV1Realtime, bool) {
	if o == nil || IsNil(o.Realtime) {
		return nil, false
	}
	return o.Realtime, true
}

// HasRealtime returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1CPU) HasRealtime() bool {
	if o != nil && !IsNil(o.Realtime) {
		return true
	}

	return false
}

// SetRealtime gets a reference to the given KubevirtIoApiCoreV1Realtime and assigns it to the Realtime field.
func (o *KubevirtIoApiCoreV1CPU) SetRealtime(v KubevirtIoApiCoreV1Realtime) {
	o.Realtime = &v
}

// GetSockets returns the Sockets field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1CPU) GetSockets() int64 {
	if o == nil || IsNil(o.Sockets) {
		var ret int64
		return ret
	}
	return *o.Sockets
}

// GetSocketsOk returns a tuple with the Sockets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1CPU) GetSocketsOk() (*int64, bool) {
	if o == nil || IsNil(o.Sockets) {
		return nil, false
	}
	return o.Sockets, true
}

// HasSockets returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1CPU) HasSockets() bool {
	if o != nil && !IsNil(o.Sockets) {
		return true
	}

	return false
}

// SetSockets gets a reference to the given int64 and assigns it to the Sockets field.
func (o *KubevirtIoApiCoreV1CPU) SetSockets(v int64) {
	o.Sockets = &v
}

// GetThreads returns the Threads field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1CPU) GetThreads() int64 {
	if o == nil || IsNil(o.Threads) {
		var ret int64
		return ret
	}
	return *o.Threads
}

// GetThreadsOk returns a tuple with the Threads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1CPU) GetThreadsOk() (*int64, bool) {
	if o == nil || IsNil(o.Threads) {
		return nil, false
	}
	return o.Threads, true
}

// HasThreads returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1CPU) HasThreads() bool {
	if o != nil && !IsNil(o.Threads) {
		return true
	}

	return false
}

// SetThreads gets a reference to the given int64 and assigns it to the Threads field.
func (o *KubevirtIoApiCoreV1CPU) SetThreads(v int64) {
	o.Threads = &v
}

func (o KubevirtIoApiCoreV1CPU) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubevirtIoApiCoreV1CPU) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cores) {
		toSerialize["cores"] = o.Cores
	}
	if !IsNil(o.DedicatedCpuPlacement) {
		toSerialize["dedicatedCpuPlacement"] = o.DedicatedCpuPlacement
	}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.IsolateEmulatorThread) {
		toSerialize["isolateEmulatorThread"] = o.IsolateEmulatorThread
	}
	if !IsNil(o.MaxSockets) {
		toSerialize["maxSockets"] = o.MaxSockets
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Numa) {
		toSerialize["numa"] = o.Numa
	}
	if !IsNil(o.Realtime) {
		toSerialize["realtime"] = o.Realtime
	}
	if !IsNil(o.Sockets) {
		toSerialize["sockets"] = o.Sockets
	}
	if !IsNil(o.Threads) {
		toSerialize["threads"] = o.Threads
	}
	return toSerialize, nil
}

type NullableKubevirtIoApiCoreV1CPU struct {
	value *KubevirtIoApiCoreV1CPU
	isSet bool
}

func (v NullableKubevirtIoApiCoreV1CPU) Get() *KubevirtIoApiCoreV1CPU {
	return v.value
}

func (v *NullableKubevirtIoApiCoreV1CPU) Set(val *KubevirtIoApiCoreV1CPU) {
	v.value = val
	v.isSet = true
}

func (v NullableKubevirtIoApiCoreV1CPU) IsSet() bool {
	return v.isSet
}

func (v *NullableKubevirtIoApiCoreV1CPU) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubevirtIoApiCoreV1CPU(val *KubevirtIoApiCoreV1CPU) *NullableKubevirtIoApiCoreV1CPU {
	return &NullableKubevirtIoApiCoreV1CPU{value: val, isSet: true}
}

func (v NullableKubevirtIoApiCoreV1CPU) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubevirtIoApiCoreV1CPU) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


