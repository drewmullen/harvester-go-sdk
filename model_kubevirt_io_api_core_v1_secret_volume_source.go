/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
)

// checks if the KubevirtIoApiCoreV1SecretVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubevirtIoApiCoreV1SecretVolumeSource{}

// KubevirtIoApiCoreV1SecretVolumeSource struct for KubevirtIoApiCoreV1SecretVolumeSource
type KubevirtIoApiCoreV1SecretVolumeSource struct {
	Optional *bool `json:"optional,omitempty"`
	SecretName *string `json:"secretName,omitempty"`
	VolumeLabel *string `json:"volumeLabel,omitempty"`
}

// NewKubevirtIoApiCoreV1SecretVolumeSource instantiates a new KubevirtIoApiCoreV1SecretVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubevirtIoApiCoreV1SecretVolumeSource() *KubevirtIoApiCoreV1SecretVolumeSource {
	this := KubevirtIoApiCoreV1SecretVolumeSource{}
	return &this
}

// NewKubevirtIoApiCoreV1SecretVolumeSourceWithDefaults instantiates a new KubevirtIoApiCoreV1SecretVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubevirtIoApiCoreV1SecretVolumeSourceWithDefaults() *KubevirtIoApiCoreV1SecretVolumeSource {
	this := KubevirtIoApiCoreV1SecretVolumeSource{}
	return &this
}

// GetOptional returns the Optional field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1SecretVolumeSource) GetOptional() bool {
	if o == nil || IsNil(o.Optional) {
		var ret bool
		return ret
	}
	return *o.Optional
}

// GetOptionalOk returns a tuple with the Optional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1SecretVolumeSource) GetOptionalOk() (*bool, bool) {
	if o == nil || IsNil(o.Optional) {
		return nil, false
	}
	return o.Optional, true
}

// HasOptional returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1SecretVolumeSource) HasOptional() bool {
	if o != nil && !IsNil(o.Optional) {
		return true
	}

	return false
}

// SetOptional gets a reference to the given bool and assigns it to the Optional field.
func (o *KubevirtIoApiCoreV1SecretVolumeSource) SetOptional(v bool) {
	o.Optional = &v
}

// GetSecretName returns the SecretName field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1SecretVolumeSource) GetSecretName() string {
	if o == nil || IsNil(o.SecretName) {
		var ret string
		return ret
	}
	return *o.SecretName
}

// GetSecretNameOk returns a tuple with the SecretName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1SecretVolumeSource) GetSecretNameOk() (*string, bool) {
	if o == nil || IsNil(o.SecretName) {
		return nil, false
	}
	return o.SecretName, true
}

// HasSecretName returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1SecretVolumeSource) HasSecretName() bool {
	if o != nil && !IsNil(o.SecretName) {
		return true
	}

	return false
}

// SetSecretName gets a reference to the given string and assigns it to the SecretName field.
func (o *KubevirtIoApiCoreV1SecretVolumeSource) SetSecretName(v string) {
	o.SecretName = &v
}

// GetVolumeLabel returns the VolumeLabel field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1SecretVolumeSource) GetVolumeLabel() string {
	if o == nil || IsNil(o.VolumeLabel) {
		var ret string
		return ret
	}
	return *o.VolumeLabel
}

// GetVolumeLabelOk returns a tuple with the VolumeLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1SecretVolumeSource) GetVolumeLabelOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeLabel) {
		return nil, false
	}
	return o.VolumeLabel, true
}

// HasVolumeLabel returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1SecretVolumeSource) HasVolumeLabel() bool {
	if o != nil && !IsNil(o.VolumeLabel) {
		return true
	}

	return false
}

// SetVolumeLabel gets a reference to the given string and assigns it to the VolumeLabel field.
func (o *KubevirtIoApiCoreV1SecretVolumeSource) SetVolumeLabel(v string) {
	o.VolumeLabel = &v
}

func (o KubevirtIoApiCoreV1SecretVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubevirtIoApiCoreV1SecretVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Optional) {
		toSerialize["optional"] = o.Optional
	}
	if !IsNil(o.SecretName) {
		toSerialize["secretName"] = o.SecretName
	}
	if !IsNil(o.VolumeLabel) {
		toSerialize["volumeLabel"] = o.VolumeLabel
	}
	return toSerialize, nil
}

type NullableKubevirtIoApiCoreV1SecretVolumeSource struct {
	value *KubevirtIoApiCoreV1SecretVolumeSource
	isSet bool
}

func (v NullableKubevirtIoApiCoreV1SecretVolumeSource) Get() *KubevirtIoApiCoreV1SecretVolumeSource {
	return v.value
}

func (v *NullableKubevirtIoApiCoreV1SecretVolumeSource) Set(val *KubevirtIoApiCoreV1SecretVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableKubevirtIoApiCoreV1SecretVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableKubevirtIoApiCoreV1SecretVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubevirtIoApiCoreV1SecretVolumeSource(val *KubevirtIoApiCoreV1SecretVolumeSource) *NullableKubevirtIoApiCoreV1SecretVolumeSource {
	return &NullableKubevirtIoApiCoreV1SecretVolumeSource{value: val, isSet: true}
}

func (v NullableKubevirtIoApiCoreV1SecretVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubevirtIoApiCoreV1SecretVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


