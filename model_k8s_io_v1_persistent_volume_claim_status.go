/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
)

// checks if the K8sIoV1PersistentVolumeClaimStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &K8sIoV1PersistentVolumeClaimStatus{}

// K8sIoV1PersistentVolumeClaimStatus struct for K8sIoV1PersistentVolumeClaimStatus
type K8sIoV1PersistentVolumeClaimStatus struct {
	AccessModes []string `json:"accessModes,omitempty"`
	AllocatedResources *map[string]string `json:"allocatedResources,omitempty"`
	Capacity *map[string]string `json:"capacity,omitempty"`
	Conditions []K8sIoV1PersistentVolumeClaimCondition `json:"conditions,omitempty"`
	Phase *string `json:"phase,omitempty"`
	ResizeStatus *string `json:"resizeStatus,omitempty"`
}

// NewK8sIoV1PersistentVolumeClaimStatus instantiates a new K8sIoV1PersistentVolumeClaimStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewK8sIoV1PersistentVolumeClaimStatus() *K8sIoV1PersistentVolumeClaimStatus {
	this := K8sIoV1PersistentVolumeClaimStatus{}
	return &this
}

// NewK8sIoV1PersistentVolumeClaimStatusWithDefaults instantiates a new K8sIoV1PersistentVolumeClaimStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewK8sIoV1PersistentVolumeClaimStatusWithDefaults() *K8sIoV1PersistentVolumeClaimStatus {
	this := K8sIoV1PersistentVolumeClaimStatus{}
	return &this
}

// GetAccessModes returns the AccessModes field value if set, zero value otherwise.
func (o *K8sIoV1PersistentVolumeClaimStatus) GetAccessModes() []string {
	if o == nil || IsNil(o.AccessModes) {
		var ret []string
		return ret
	}
	return o.AccessModes
}

// GetAccessModesOk returns a tuple with the AccessModes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PersistentVolumeClaimStatus) GetAccessModesOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessModes) {
		return nil, false
	}
	return o.AccessModes, true
}

// HasAccessModes returns a boolean if a field has been set.
func (o *K8sIoV1PersistentVolumeClaimStatus) HasAccessModes() bool {
	if o != nil && !IsNil(o.AccessModes) {
		return true
	}

	return false
}

// SetAccessModes gets a reference to the given []string and assigns it to the AccessModes field.
func (o *K8sIoV1PersistentVolumeClaimStatus) SetAccessModes(v []string) {
	o.AccessModes = v
}

// GetAllocatedResources returns the AllocatedResources field value if set, zero value otherwise.
func (o *K8sIoV1PersistentVolumeClaimStatus) GetAllocatedResources() map[string]string {
	if o == nil || IsNil(o.AllocatedResources) {
		var ret map[string]string
		return ret
	}
	return *o.AllocatedResources
}

// GetAllocatedResourcesOk returns a tuple with the AllocatedResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PersistentVolumeClaimStatus) GetAllocatedResourcesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.AllocatedResources) {
		return nil, false
	}
	return o.AllocatedResources, true
}

// HasAllocatedResources returns a boolean if a field has been set.
func (o *K8sIoV1PersistentVolumeClaimStatus) HasAllocatedResources() bool {
	if o != nil && !IsNil(o.AllocatedResources) {
		return true
	}

	return false
}

// SetAllocatedResources gets a reference to the given map[string]string and assigns it to the AllocatedResources field.
func (o *K8sIoV1PersistentVolumeClaimStatus) SetAllocatedResources(v map[string]string) {
	o.AllocatedResources = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *K8sIoV1PersistentVolumeClaimStatus) GetCapacity() map[string]string {
	if o == nil || IsNil(o.Capacity) {
		var ret map[string]string
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PersistentVolumeClaimStatus) GetCapacityOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *K8sIoV1PersistentVolumeClaimStatus) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given map[string]string and assigns it to the Capacity field.
func (o *K8sIoV1PersistentVolumeClaimStatus) SetCapacity(v map[string]string) {
	o.Capacity = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *K8sIoV1PersistentVolumeClaimStatus) GetConditions() []K8sIoV1PersistentVolumeClaimCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []K8sIoV1PersistentVolumeClaimCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PersistentVolumeClaimStatus) GetConditionsOk() ([]K8sIoV1PersistentVolumeClaimCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *K8sIoV1PersistentVolumeClaimStatus) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []K8sIoV1PersistentVolumeClaimCondition and assigns it to the Conditions field.
func (o *K8sIoV1PersistentVolumeClaimStatus) SetConditions(v []K8sIoV1PersistentVolumeClaimCondition) {
	o.Conditions = v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *K8sIoV1PersistentVolumeClaimStatus) GetPhase() string {
	if o == nil || IsNil(o.Phase) {
		var ret string
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PersistentVolumeClaimStatus) GetPhaseOk() (*string, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *K8sIoV1PersistentVolumeClaimStatus) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given string and assigns it to the Phase field.
func (o *K8sIoV1PersistentVolumeClaimStatus) SetPhase(v string) {
	o.Phase = &v
}

// GetResizeStatus returns the ResizeStatus field value if set, zero value otherwise.
func (o *K8sIoV1PersistentVolumeClaimStatus) GetResizeStatus() string {
	if o == nil || IsNil(o.ResizeStatus) {
		var ret string
		return ret
	}
	return *o.ResizeStatus
}

// GetResizeStatusOk returns a tuple with the ResizeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PersistentVolumeClaimStatus) GetResizeStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ResizeStatus) {
		return nil, false
	}
	return o.ResizeStatus, true
}

// HasResizeStatus returns a boolean if a field has been set.
func (o *K8sIoV1PersistentVolumeClaimStatus) HasResizeStatus() bool {
	if o != nil && !IsNil(o.ResizeStatus) {
		return true
	}

	return false
}

// SetResizeStatus gets a reference to the given string and assigns it to the ResizeStatus field.
func (o *K8sIoV1PersistentVolumeClaimStatus) SetResizeStatus(v string) {
	o.ResizeStatus = &v
}

func (o K8sIoV1PersistentVolumeClaimStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o K8sIoV1PersistentVolumeClaimStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessModes) {
		toSerialize["accessModes"] = o.AccessModes
	}
	if !IsNil(o.AllocatedResources) {
		toSerialize["allocatedResources"] = o.AllocatedResources
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.ResizeStatus) {
		toSerialize["resizeStatus"] = o.ResizeStatus
	}
	return toSerialize, nil
}

type NullableK8sIoV1PersistentVolumeClaimStatus struct {
	value *K8sIoV1PersistentVolumeClaimStatus
	isSet bool
}

func (v NullableK8sIoV1PersistentVolumeClaimStatus) Get() *K8sIoV1PersistentVolumeClaimStatus {
	return v.value
}

func (v *NullableK8sIoV1PersistentVolumeClaimStatus) Set(val *K8sIoV1PersistentVolumeClaimStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableK8sIoV1PersistentVolumeClaimStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableK8sIoV1PersistentVolumeClaimStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableK8sIoV1PersistentVolumeClaimStatus(val *K8sIoV1PersistentVolumeClaimStatus) *NullableK8sIoV1PersistentVolumeClaimStatus {
	return &NullableK8sIoV1PersistentVolumeClaimStatus{value: val, isSet: true}
}

func (v NullableK8sIoV1PersistentVolumeClaimStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableK8sIoV1PersistentVolumeClaimStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


