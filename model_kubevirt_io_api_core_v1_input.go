/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KubevirtIoApiCoreV1Input type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubevirtIoApiCoreV1Input{}

// KubevirtIoApiCoreV1Input struct for KubevirtIoApiCoreV1Input
type KubevirtIoApiCoreV1Input struct {
	Bus *string `json:"bus,omitempty"`
	Name string `json:"name"`
	Type string `json:"type"`
}

type _KubevirtIoApiCoreV1Input KubevirtIoApiCoreV1Input

// NewKubevirtIoApiCoreV1Input instantiates a new KubevirtIoApiCoreV1Input object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubevirtIoApiCoreV1Input(name string, type_ string) *KubevirtIoApiCoreV1Input {
	this := KubevirtIoApiCoreV1Input{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewKubevirtIoApiCoreV1InputWithDefaults instantiates a new KubevirtIoApiCoreV1Input object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubevirtIoApiCoreV1InputWithDefaults() *KubevirtIoApiCoreV1Input {
	this := KubevirtIoApiCoreV1Input{}
	var name string = ""
	this.Name = name
	var type_ string = ""
	this.Type = type_
	return &this
}

// GetBus returns the Bus field value if set, zero value otherwise.
func (o *KubevirtIoApiCoreV1Input) GetBus() string {
	if o == nil || IsNil(o.Bus) {
		var ret string
		return ret
	}
	return *o.Bus
}

// GetBusOk returns a tuple with the Bus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Input) GetBusOk() (*string, bool) {
	if o == nil || IsNil(o.Bus) {
		return nil, false
	}
	return o.Bus, true
}

// HasBus returns a boolean if a field has been set.
func (o *KubevirtIoApiCoreV1Input) HasBus() bool {
	if o != nil && !IsNil(o.Bus) {
		return true
	}

	return false
}

// SetBus gets a reference to the given string and assigns it to the Bus field.
func (o *KubevirtIoApiCoreV1Input) SetBus(v string) {
	o.Bus = &v
}

// GetName returns the Name field value
func (o *KubevirtIoApiCoreV1Input) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Input) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KubevirtIoApiCoreV1Input) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *KubevirtIoApiCoreV1Input) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *KubevirtIoApiCoreV1Input) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *KubevirtIoApiCoreV1Input) SetType(v string) {
	o.Type = v
}

func (o KubevirtIoApiCoreV1Input) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubevirtIoApiCoreV1Input) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bus) {
		toSerialize["bus"] = o.Bus
	}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *KubevirtIoApiCoreV1Input) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubevirtIoApiCoreV1Input := _KubevirtIoApiCoreV1Input{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKubevirtIoApiCoreV1Input)

	if err != nil {
		return err
	}

	*o = KubevirtIoApiCoreV1Input(varKubevirtIoApiCoreV1Input)

	return err
}

type NullableKubevirtIoApiCoreV1Input struct {
	value *KubevirtIoApiCoreV1Input
	isSet bool
}

func (v NullableKubevirtIoApiCoreV1Input) Get() *KubevirtIoApiCoreV1Input {
	return v.value
}

func (v *NullableKubevirtIoApiCoreV1Input) Set(val *KubevirtIoApiCoreV1Input) {
	v.value = val
	v.isSet = true
}

func (v NullableKubevirtIoApiCoreV1Input) IsSet() bool {
	return v.isSet
}

func (v *NullableKubevirtIoApiCoreV1Input) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubevirtIoApiCoreV1Input(val *KubevirtIoApiCoreV1Input) *NullableKubevirtIoApiCoreV1Input {
	return &NullableKubevirtIoApiCoreV1Input{value: val, isSet: true}
}

func (v NullableKubevirtIoApiCoreV1Input) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubevirtIoApiCoreV1Input) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


