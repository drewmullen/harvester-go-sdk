/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HarvesterhciIoV1beta1VolumeBackup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarvesterhciIoV1beta1VolumeBackup{}

// HarvesterhciIoV1beta1VolumeBackup struct for HarvesterhciIoV1beta1VolumeBackup
type HarvesterhciIoV1beta1VolumeBackup struct {
	CreationTime *string `json:"creationTime,omitempty"`
	CsiDriverName string `json:"csiDriverName"`
	Error *HarvesterhciIoV1beta1Error `json:"error,omitempty"`
	LonghornBackupName *string `json:"longhornBackupName,omitempty"`
	Name *string `json:"name,omitempty"`
	PersistentVolumeClaim HarvesterhciIoV1beta1PersistentVolumeClaimSourceSpec `json:"persistentVolumeClaim"`
	Progress *int32 `json:"progress,omitempty"`
	ReadyToUse *bool `json:"readyToUse,omitempty"`
	VolumeName string `json:"volumeName"`
	VolumeSize *int64 `json:"volumeSize,omitempty"`
}

type _HarvesterhciIoV1beta1VolumeBackup HarvesterhciIoV1beta1VolumeBackup

// NewHarvesterhciIoV1beta1VolumeBackup instantiates a new HarvesterhciIoV1beta1VolumeBackup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarvesterhciIoV1beta1VolumeBackup(csiDriverName string, persistentVolumeClaim HarvesterhciIoV1beta1PersistentVolumeClaimSourceSpec, volumeName string) *HarvesterhciIoV1beta1VolumeBackup {
	this := HarvesterhciIoV1beta1VolumeBackup{}
	var creationTime string = ""
	this.CreationTime = &creationTime
	this.CsiDriverName = csiDriverName
	this.PersistentVolumeClaim = persistentVolumeClaim
	this.VolumeName = volumeName
	return &this
}

// NewHarvesterhciIoV1beta1VolumeBackupWithDefaults instantiates a new HarvesterhciIoV1beta1VolumeBackup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarvesterhciIoV1beta1VolumeBackupWithDefaults() *HarvesterhciIoV1beta1VolumeBackup {
	this := HarvesterhciIoV1beta1VolumeBackup{}
	var creationTime string = ""
	this.CreationTime = &creationTime
	var csiDriverName string = ""
	this.CsiDriverName = csiDriverName
	var volumeName string = ""
	this.VolumeName = volumeName
	return &this
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetCreationTime() string {
	if o == nil || IsNil(o.CreationTime) {
		var ret string
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetCreationTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given string and assigns it to the CreationTime field.
func (o *HarvesterhciIoV1beta1VolumeBackup) SetCreationTime(v string) {
	o.CreationTime = &v
}

// GetCsiDriverName returns the CsiDriverName field value
func (o *HarvesterhciIoV1beta1VolumeBackup) GetCsiDriverName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CsiDriverName
}

// GetCsiDriverNameOk returns a tuple with the CsiDriverName field value
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetCsiDriverNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CsiDriverName, true
}

// SetCsiDriverName sets field value
func (o *HarvesterhciIoV1beta1VolumeBackup) SetCsiDriverName(v string) {
	o.CsiDriverName = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetError() HarvesterhciIoV1beta1Error {
	if o == nil || IsNil(o.Error) {
		var ret HarvesterhciIoV1beta1Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetErrorOk() (*HarvesterhciIoV1beta1Error, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given HarvesterhciIoV1beta1Error and assigns it to the Error field.
func (o *HarvesterhciIoV1beta1VolumeBackup) SetError(v HarvesterhciIoV1beta1Error) {
	o.Error = &v
}

// GetLonghornBackupName returns the LonghornBackupName field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetLonghornBackupName() string {
	if o == nil || IsNil(o.LonghornBackupName) {
		var ret string
		return ret
	}
	return *o.LonghornBackupName
}

// GetLonghornBackupNameOk returns a tuple with the LonghornBackupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetLonghornBackupNameOk() (*string, bool) {
	if o == nil || IsNil(o.LonghornBackupName) {
		return nil, false
	}
	return o.LonghornBackupName, true
}

// HasLonghornBackupName returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) HasLonghornBackupName() bool {
	if o != nil && !IsNil(o.LonghornBackupName) {
		return true
	}

	return false
}

// SetLonghornBackupName gets a reference to the given string and assigns it to the LonghornBackupName field.
func (o *HarvesterhciIoV1beta1VolumeBackup) SetLonghornBackupName(v string) {
	o.LonghornBackupName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HarvesterhciIoV1beta1VolumeBackup) SetName(v string) {
	o.Name = &v
}

// GetPersistentVolumeClaim returns the PersistentVolumeClaim field value
func (o *HarvesterhciIoV1beta1VolumeBackup) GetPersistentVolumeClaim() HarvesterhciIoV1beta1PersistentVolumeClaimSourceSpec {
	if o == nil {
		var ret HarvesterhciIoV1beta1PersistentVolumeClaimSourceSpec
		return ret
	}

	return o.PersistentVolumeClaim
}

// GetPersistentVolumeClaimOk returns a tuple with the PersistentVolumeClaim field value
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetPersistentVolumeClaimOk() (*HarvesterhciIoV1beta1PersistentVolumeClaimSourceSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PersistentVolumeClaim, true
}

// SetPersistentVolumeClaim sets field value
func (o *HarvesterhciIoV1beta1VolumeBackup) SetPersistentVolumeClaim(v HarvesterhciIoV1beta1PersistentVolumeClaimSourceSpec) {
	o.PersistentVolumeClaim = v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetProgress() int32 {
	if o == nil || IsNil(o.Progress) {
		var ret int32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetProgressOk() (*int32, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int32 and assigns it to the Progress field.
func (o *HarvesterhciIoV1beta1VolumeBackup) SetProgress(v int32) {
	o.Progress = &v
}

// GetReadyToUse returns the ReadyToUse field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetReadyToUse() bool {
	if o == nil || IsNil(o.ReadyToUse) {
		var ret bool
		return ret
	}
	return *o.ReadyToUse
}

// GetReadyToUseOk returns a tuple with the ReadyToUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetReadyToUseOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadyToUse) {
		return nil, false
	}
	return o.ReadyToUse, true
}

// HasReadyToUse returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) HasReadyToUse() bool {
	if o != nil && !IsNil(o.ReadyToUse) {
		return true
	}

	return false
}

// SetReadyToUse gets a reference to the given bool and assigns it to the ReadyToUse field.
func (o *HarvesterhciIoV1beta1VolumeBackup) SetReadyToUse(v bool) {
	o.ReadyToUse = &v
}

// GetVolumeName returns the VolumeName field value
func (o *HarvesterhciIoV1beta1VolumeBackup) GetVolumeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetVolumeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumeName, true
}

// SetVolumeName sets field value
func (o *HarvesterhciIoV1beta1VolumeBackup) SetVolumeName(v string) {
	o.VolumeName = v
}

// GetVolumeSize returns the VolumeSize field value if set, zero value otherwise.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetVolumeSize() int64 {
	if o == nil || IsNil(o.VolumeSize) {
		var ret int64
		return ret
	}
	return *o.VolumeSize
}

// GetVolumeSizeOk returns a tuple with the VolumeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) GetVolumeSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.VolumeSize) {
		return nil, false
	}
	return o.VolumeSize, true
}

// HasVolumeSize returns a boolean if a field has been set.
func (o *HarvesterhciIoV1beta1VolumeBackup) HasVolumeSize() bool {
	if o != nil && !IsNil(o.VolumeSize) {
		return true
	}

	return false
}

// SetVolumeSize gets a reference to the given int64 and assigns it to the VolumeSize field.
func (o *HarvesterhciIoV1beta1VolumeBackup) SetVolumeSize(v int64) {
	o.VolumeSize = &v
}

func (o HarvesterhciIoV1beta1VolumeBackup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarvesterhciIoV1beta1VolumeBackup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	toSerialize["csiDriverName"] = o.CsiDriverName
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.LonghornBackupName) {
		toSerialize["longhornBackupName"] = o.LonghornBackupName
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["persistentVolumeClaim"] = o.PersistentVolumeClaim
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if !IsNil(o.ReadyToUse) {
		toSerialize["readyToUse"] = o.ReadyToUse
	}
	toSerialize["volumeName"] = o.VolumeName
	if !IsNil(o.VolumeSize) {
		toSerialize["volumeSize"] = o.VolumeSize
	}
	return toSerialize, nil
}

func (o *HarvesterhciIoV1beta1VolumeBackup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"csiDriverName",
		"persistentVolumeClaim",
		"volumeName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHarvesterhciIoV1beta1VolumeBackup := _HarvesterhciIoV1beta1VolumeBackup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHarvesterhciIoV1beta1VolumeBackup)

	if err != nil {
		return err
	}

	*o = HarvesterhciIoV1beta1VolumeBackup(varHarvesterhciIoV1beta1VolumeBackup)

	return err
}

type NullableHarvesterhciIoV1beta1VolumeBackup struct {
	value *HarvesterhciIoV1beta1VolumeBackup
	isSet bool
}

func (v NullableHarvesterhciIoV1beta1VolumeBackup) Get() *HarvesterhciIoV1beta1VolumeBackup {
	return v.value
}

func (v *NullableHarvesterhciIoV1beta1VolumeBackup) Set(val *HarvesterhciIoV1beta1VolumeBackup) {
	v.value = val
	v.isSet = true
}

func (v NullableHarvesterhciIoV1beta1VolumeBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableHarvesterhciIoV1beta1VolumeBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarvesterhciIoV1beta1VolumeBackup(val *HarvesterhciIoV1beta1VolumeBackup) *NullableHarvesterhciIoV1beta1VolumeBackup {
	return &NullableHarvesterhciIoV1beta1VolumeBackup{value: val, isSet: true}
}

func (v NullableHarvesterhciIoV1beta1VolumeBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarvesterhciIoV1beta1VolumeBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


