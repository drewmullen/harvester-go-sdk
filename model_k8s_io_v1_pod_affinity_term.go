/*
Harvester APIs

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package harvester

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the K8sIoV1PodAffinityTerm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &K8sIoV1PodAffinityTerm{}

// K8sIoV1PodAffinityTerm Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type K8sIoV1PodAffinityTerm struct {
	// A label query over a set of resources, in this case pods.
	LabelSelector *K8sIoV1LabelSelector `json:"labelSelector,omitempty"`
	// A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces.
	NamespaceSelector *K8sIoV1LabelSelector `json:"namespaceSelector,omitempty"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".
	Namespaces []string `json:"namespaces,omitempty"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

type _K8sIoV1PodAffinityTerm K8sIoV1PodAffinityTerm

// NewK8sIoV1PodAffinityTerm instantiates a new K8sIoV1PodAffinityTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewK8sIoV1PodAffinityTerm(topologyKey string) *K8sIoV1PodAffinityTerm {
	this := K8sIoV1PodAffinityTerm{}
	this.TopologyKey = topologyKey
	return &this
}

// NewK8sIoV1PodAffinityTermWithDefaults instantiates a new K8sIoV1PodAffinityTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewK8sIoV1PodAffinityTermWithDefaults() *K8sIoV1PodAffinityTerm {
	this := K8sIoV1PodAffinityTerm{}
	var topologyKey string = ""
	this.TopologyKey = topologyKey
	return &this
}

// GetLabelSelector returns the LabelSelector field value if set, zero value otherwise.
func (o *K8sIoV1PodAffinityTerm) GetLabelSelector() K8sIoV1LabelSelector {
	if o == nil || IsNil(o.LabelSelector) {
		var ret K8sIoV1LabelSelector
		return ret
	}
	return *o.LabelSelector
}

// GetLabelSelectorOk returns a tuple with the LabelSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PodAffinityTerm) GetLabelSelectorOk() (*K8sIoV1LabelSelector, bool) {
	if o == nil || IsNil(o.LabelSelector) {
		return nil, false
	}
	return o.LabelSelector, true
}

// HasLabelSelector returns a boolean if a field has been set.
func (o *K8sIoV1PodAffinityTerm) HasLabelSelector() bool {
	if o != nil && !IsNil(o.LabelSelector) {
		return true
	}

	return false
}

// SetLabelSelector gets a reference to the given K8sIoV1LabelSelector and assigns it to the LabelSelector field.
func (o *K8sIoV1PodAffinityTerm) SetLabelSelector(v K8sIoV1LabelSelector) {
	o.LabelSelector = &v
}

// GetNamespaceSelector returns the NamespaceSelector field value if set, zero value otherwise.
func (o *K8sIoV1PodAffinityTerm) GetNamespaceSelector() K8sIoV1LabelSelector {
	if o == nil || IsNil(o.NamespaceSelector) {
		var ret K8sIoV1LabelSelector
		return ret
	}
	return *o.NamespaceSelector
}

// GetNamespaceSelectorOk returns a tuple with the NamespaceSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PodAffinityTerm) GetNamespaceSelectorOk() (*K8sIoV1LabelSelector, bool) {
	if o == nil || IsNil(o.NamespaceSelector) {
		return nil, false
	}
	return o.NamespaceSelector, true
}

// HasNamespaceSelector returns a boolean if a field has been set.
func (o *K8sIoV1PodAffinityTerm) HasNamespaceSelector() bool {
	if o != nil && !IsNil(o.NamespaceSelector) {
		return true
	}

	return false
}

// SetNamespaceSelector gets a reference to the given K8sIoV1LabelSelector and assigns it to the NamespaceSelector field.
func (o *K8sIoV1PodAffinityTerm) SetNamespaceSelector(v K8sIoV1LabelSelector) {
	o.NamespaceSelector = &v
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise.
func (o *K8sIoV1PodAffinityTerm) GetNamespaces() []string {
	if o == nil || IsNil(o.Namespaces) {
		var ret []string
		return ret
	}
	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *K8sIoV1PodAffinityTerm) GetNamespacesOk() ([]string, bool) {
	if o == nil || IsNil(o.Namespaces) {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *K8sIoV1PodAffinityTerm) HasNamespaces() bool {
	if o != nil && !IsNil(o.Namespaces) {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given []string and assigns it to the Namespaces field.
func (o *K8sIoV1PodAffinityTerm) SetNamespaces(v []string) {
	o.Namespaces = v
}

// GetTopologyKey returns the TopologyKey field value
func (o *K8sIoV1PodAffinityTerm) GetTopologyKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopologyKey
}

// GetTopologyKeyOk returns a tuple with the TopologyKey field value
// and a boolean to check if the value has been set.
func (o *K8sIoV1PodAffinityTerm) GetTopologyKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopologyKey, true
}

// SetTopologyKey sets field value
func (o *K8sIoV1PodAffinityTerm) SetTopologyKey(v string) {
	o.TopologyKey = v
}

func (o K8sIoV1PodAffinityTerm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o K8sIoV1PodAffinityTerm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LabelSelector) {
		toSerialize["labelSelector"] = o.LabelSelector
	}
	if !IsNil(o.NamespaceSelector) {
		toSerialize["namespaceSelector"] = o.NamespaceSelector
	}
	if !IsNil(o.Namespaces) {
		toSerialize["namespaces"] = o.Namespaces
	}
	toSerialize["topologyKey"] = o.TopologyKey
	return toSerialize, nil
}

func (o *K8sIoV1PodAffinityTerm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"topologyKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varK8sIoV1PodAffinityTerm := _K8sIoV1PodAffinityTerm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varK8sIoV1PodAffinityTerm)

	if err != nil {
		return err
	}

	*o = K8sIoV1PodAffinityTerm(varK8sIoV1PodAffinityTerm)

	return err
}

type NullableK8sIoV1PodAffinityTerm struct {
	value *K8sIoV1PodAffinityTerm
	isSet bool
}

func (v NullableK8sIoV1PodAffinityTerm) Get() *K8sIoV1PodAffinityTerm {
	return v.value
}

func (v *NullableK8sIoV1PodAffinityTerm) Set(val *K8sIoV1PodAffinityTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableK8sIoV1PodAffinityTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableK8sIoV1PodAffinityTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableK8sIoV1PodAffinityTerm(val *K8sIoV1PodAffinityTerm) *NullableK8sIoV1PodAffinityTerm {
	return &NullableK8sIoV1PodAffinityTerm{value: val, isSet: true}
}

func (v NullableK8sIoV1PodAffinityTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableK8sIoV1PodAffinityTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


